
Final_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000242  00800060  00003a8e  00003b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  008002a2  008002a2  00003d64  2**0
                  ALLOC
  3 .stab         0000396c  00000000  00000000  00003d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000178f  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00008fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000091ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000b5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000c972  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000db4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000dfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__vector_6>
      1c:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__vector_7>
      20:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__vector_8>
      24:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__vector_9>
      28:	0c 94 df 1b 	jmp	0x37be	; 0x37be <__vector_10>
      2c:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 1c 	call	0x388a	; 0x388a <main>
      8a:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e8       	ldi	r22, 0x81	; 129
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e7 57       	subi	r30, 0x77	; 119
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <BUZZ_voidInit>:
#include "Buzzer_interface.h"
#include "util/delay.h"


void BUZZ_voidInit(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Direction(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <BUZZ_voidTurnOn>:


void BUZZ_voidTurnOn(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(BUZZER_PORT,BUZZER_PIN,PIN_HIGH);
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <BUZZ_voidTurnOff>:


void BUZZ_voidTurnOff(void)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(BUZZER_PORT,BUZZER_PIN,PIN_LOW);
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
}
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <BUZZ_voidBeep>:


void BUZZ_voidBeep(void) {
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	2e 97       	sbiw	r28, 0x0e	; 14
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
	BUZZ_voidTurnOn();
     e54:	0e 94 08 07 	call	0xe10	; 0xe10 <BUZZ_voidTurnOn>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e4       	ldi	r25, 0x40	; 64
     e5c:	ac e1       	ldi	r26, 0x1C	; 28
     e5e:	b6 e4       	ldi	r27, 0x46	; 70
     e60:	8b 87       	std	Y+11, r24	; 0x0b
     e62:	9c 87       	std	Y+12, r25	; 0x0c
     e64:	ad 87       	std	Y+13, r26	; 0x0d
     e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e68:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a ef       	ldi	r20, 0xFA	; 250
     e76:	54 e4       	ldi	r21, 0x44	; 68
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	8f 83       	std	Y+7, r24	; 0x07
     e82:	98 87       	std	Y+8, r25	; 0x08
     e84:	a9 87       	std	Y+9, r26	; 0x09
     e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	78 85       	ldd	r23, Y+8	; 0x08
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	2c f4       	brge	.+10     	; 0xeaa <BUZZ_voidBeep+0x6a>
		__ticks = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <BUZZ_voidBeep+0xe8>
	else if (__tmp > 65535)
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	57 e4       	ldi	r21, 0x47	; 71
     eba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	4c f5       	brge	.+82     	; 0xf14 <BUZZ_voidBeep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <BUZZ_voidBeep+0xca>
     eec:	88 ec       	ldi	r24, 0xC8	; 200
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <BUZZ_voidBeep+0xb8>
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	69 f7       	brne	.-38     	; 0xeec <BUZZ_voidBeep+0xac>
     f12:	14 c0       	rjmp	.+40     	; 0xf3c <BUZZ_voidBeep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <BUZZ_voidBeep+0xf4>
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);
	BUZZ_voidTurnOff();
     f3c:	0e 94 14 07 	call	0xe28	; 0xe28 <BUZZ_voidTurnOff>
}
     f40:	2e 96       	adiw	r28, 0x0e	; 14
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include <util/delay.h>

 void CLCD_voidSendCommand(u8 Copy_u8Command)
 {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	2f 97       	sbiw	r28, 0x0f	; 15
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	8f 87       	std	Y+15, r24	; 0x0f
	 /* Set RS For Command */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,PIN_LOW);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

	 /* Set R/W TO write */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,PIN_LOW);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

	 /* Send Command */

	 DIO_SetPort_value(CLCD_DATA_PORT,Copy_u8Command) ;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f80:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_SetPort_value>

	 /* Enable Pulse */

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_HIGH);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e4       	ldi	r27, 0x40	; 64
     f96:	8b 87       	std	Y+11, r24	; 0x0b
     f98:	9c 87       	std	Y+12, r25	; 0x0c
     f9a:	ad 87       	std	Y+13, r26	; 0x0d
     f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a ef       	ldi	r20, 0xFA	; 250
     fac:	54 e4       	ldi	r21, 0x44	; 68
     fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	8f 83       	std	Y+7, r24	; 0x07
     fb8:	98 87       	std	Y+8, r25	; 0x08
     fba:	a9 87       	std	Y+9, r26	; 0x09
     fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	3f c0       	rjmp	.+126    	; 0x105e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     fe0:	6f 81       	ldd	r22, Y+7	; 0x07
     fe2:	78 85       	ldd	r23, Y+8	; 0x08
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	4c f5       	brge	.+82     	; 0x104a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <CLCD_voidSendCommand+0xee>
    1022:	88 ec       	ldi	r24, 0xC8	; 200
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <CLCD_voidSendCommand+0xdc>
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	69 f7       	brne	.-38     	; 0x1022 <CLCD_voidSendCommand+0xd0>
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104a:	6f 81       	ldd	r22, Y+7	; 0x07
    104c:	78 85       	ldd	r23, Y+8	; 0x08
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	9a 85       	ldd	r25, Y+10	; 0x0a
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <CLCD_voidSendCommand+0x118>
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01

	 _delay_ms(2);

	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_LOW);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
 
 }
    107c:	2f 96       	adiw	r28, 0x0f	; 15
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <CLCD_voidSendData>:
 
 void CLCD_voidSendData(u8 Copy_u8Data)
  {
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	2f 97       	sbiw	r28, 0x0f	; 15
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	8f 87       	std	Y+15, r24	; 0x0f
 	 /* Set RS For Command */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,PIN_HIGH);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

 	 /* Set R/W TO write */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,PIN_LOW);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

 	 /* Send Command */

 	 DIO_SetPort_value(CLCD_DATA_PORT,Copy_u8Data) ;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    10bc:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_SetPort_value>

 	 /* Enable Pulse */

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_HIGH);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e4       	ldi	r27, 0x40	; 64
    10d2:	8b 87       	std	Y+11, r24	; 0x0b
    10d4:	9c 87       	std	Y+12, r25	; 0x0c
    10d6:	ad 87       	std	Y+13, r26	; 0x0d
    10d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10da:	6b 85       	ldd	r22, Y+11	; 0x0b
    10dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10de:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a ef       	ldi	r20, 0xFA	; 250
    10e8:	54 e4       	ldi	r21, 0x44	; 68
    10ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	8f 83       	std	Y+7, r24	; 0x07
    10f4:	98 87       	std	Y+8, r25	; 0x08
    10f6:	a9 87       	std	Y+9, r26	; 0x09
    10f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110e:	88 23       	and	r24, r24
    1110:	2c f4       	brge	.+10     	; 0x111c <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	3f c0       	rjmp	.+126    	; 0x119a <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    111c:	6f 81       	ldd	r22, Y+7	; 0x07
    111e:	78 85       	ldd	r23, Y+8	; 0x08
    1120:	89 85       	ldd	r24, Y+9	; 0x09
    1122:	9a 85       	ldd	r25, Y+10	; 0x0a
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	4f e7       	ldi	r20, 0x7F	; 127
    112a:	57 e4       	ldi	r21, 0x47	; 71
    112c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1130:	18 16       	cp	r1, r24
    1132:	4c f5       	brge	.+82     	; 0x1186 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1134:	6b 85       	ldd	r22, Y+11	; 0x0b
    1136:	7c 85       	ldd	r23, Y+12	; 0x0c
    1138:	8d 85       	ldd	r24, Y+13	; 0x0d
    113a:	9e 85       	ldd	r25, Y+14	; 0x0e
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	0f c0       	rjmp	.+30     	; 0x117c <CLCD_voidSendData+0xee>
    115e:	88 ec       	ldi	r24, 0xC8	; 200
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <CLCD_voidSendData+0xdc>
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	69 f7       	brne	.-38     	; 0x115e <CLCD_voidSendData+0xd0>
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1186:	6f 81       	ldd	r22, Y+7	; 0x07
    1188:	78 85       	ldd	r23, Y+8	; 0x08
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <CLCD_voidSendData+0x118>
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01

 	 _delay_ms(2);

 	 DIO_SetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,PIN_LOW);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	62 e0       	ldi	r22, 0x02	; 2
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

  }
    11b8:	2f 96       	adiw	r28, 0x0f	; 15
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <CLCD_voidINIT>:

 void CLCD_voidINIT(void)
 {
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	e8 97       	sbiw	r28, 0x38	; 56
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a8 e4       	ldi	r26, 0x48	; 72
    11e4:	b2 e4       	ldi	r27, 0x42	; 66
    11e6:	8d ab       	std	Y+53, r24	; 0x35
    11e8:	9e ab       	std	Y+54, r25	; 0x36
    11ea:	af ab       	std	Y+55, r26	; 0x37
    11ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	6d a9       	ldd	r22, Y+53	; 0x35
    11f0:	7e a9       	ldd	r23, Y+54	; 0x36
    11f2:	8f a9       	ldd	r24, Y+55	; 0x37
    11f4:	98 ad       	ldd	r25, Y+56	; 0x38
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a ef       	ldi	r20, 0xFA	; 250
    11fc:	54 e4       	ldi	r21, 0x44	; 68
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	89 ab       	std	Y+49, r24	; 0x31
    1208:	9a ab       	std	Y+50, r25	; 0x32
    120a:	ab ab       	std	Y+51, r26	; 0x33
    120c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    120e:	69 a9       	ldd	r22, Y+49	; 0x31
    1210:	7a a9       	ldd	r23, Y+50	; 0x32
    1212:	8b a9       	ldd	r24, Y+51	; 0x33
    1214:	9c a9       	ldd	r25, Y+52	; 0x34
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <CLCD_voidINIT+0x66>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	98 ab       	std	Y+48, r25	; 0x30
    122c:	8f a7       	std	Y+47, r24	; 0x2f
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <CLCD_voidINIT+0xe4>
	else if (__tmp > 65535)
    1230:	69 a9       	ldd	r22, Y+49	; 0x31
    1232:	7a a9       	ldd	r23, Y+50	; 0x32
    1234:	8b a9       	ldd	r24, Y+51	; 0x33
    1236:	9c a9       	ldd	r25, Y+52	; 0x34
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <CLCD_voidINIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	6d a9       	ldd	r22, Y+53	; 0x35
    124a:	7e a9       	ldd	r23, Y+54	; 0x36
    124c:	8f a9       	ldd	r24, Y+55	; 0x37
    124e:	98 ad       	ldd	r25, Y+56	; 0x38
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	98 ab       	std	Y+48, r25	; 0x30
    126e:	8f a7       	std	Y+47, r24	; 0x2f
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <CLCD_voidINIT+0xc6>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e a7       	std	Y+46, r25	; 0x2e
    1278:	8d a7       	std	Y+45, r24	; 0x2d
    127a:	8d a5       	ldd	r24, Y+45	; 0x2d
    127c:	9e a5       	ldd	r25, Y+46	; 0x2e
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <CLCD_voidINIT+0xb4>
    1282:	9e a7       	std	Y+46, r25	; 0x2e
    1284:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8f a5       	ldd	r24, Y+47	; 0x2f
    1288:	98 a9       	ldd	r25, Y+48	; 0x30
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	98 ab       	std	Y+48, r25	; 0x30
    128e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8f a5       	ldd	r24, Y+47	; 0x2f
    1292:	98 a9       	ldd	r25, Y+48	; 0x30
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <CLCD_voidINIT+0xa8>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <CLCD_voidINIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	69 a9       	ldd	r22, Y+49	; 0x31
    129c:	7a a9       	ldd	r23, Y+50	; 0x32
    129e:	8b a9       	ldd	r24, Y+51	; 0x33
    12a0:	9c a9       	ldd	r25, Y+52	; 0x34
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	98 ab       	std	Y+48, r25	; 0x30
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
    12ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b0:	98 a9       	ldd	r25, Y+48	; 0x30
    12b2:	9c a7       	std	Y+44, r25	; 0x2c
    12b4:	8b a7       	std	Y+43, r24	; 0x2b
    12b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    12b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <CLCD_voidINIT+0xf0>
    12be:	9c a7       	std	Y+44, r25	; 0x2c
    12c0:	8b a7       	std	Y+43, r24	; 0x2b
	 /* wait 50 ms */

	 _delay_ms(50);

	 /* Set Function Set */
	 CLCD_voidSendCommand(Function_Set);
    12c2:	88 e3       	ldi	r24, 0x38	; 56
    12c4:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidSendCommand>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e8       	ldi	r26, 0x80	; 128
    12ce:	bf e3       	ldi	r27, 0x3F	; 63
    12d0:	8f a3       	std	Y+39, r24	; 0x27
    12d2:	98 a7       	std	Y+40, r25	; 0x28
    12d4:	a9 a7       	std	Y+41, r26	; 0x29
    12d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	6f a1       	ldd	r22, Y+39	; 0x27
    12da:	78 a5       	ldd	r23, Y+40	; 0x28
    12dc:	89 a5       	ldd	r24, Y+41	; 0x29
    12de:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8b a3       	std	Y+35, r24	; 0x23
    12f2:	9c a3       	std	Y+36, r25	; 0x24
    12f4:	ad a3       	std	Y+37, r26	; 0x25
    12f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f8:	6b a1       	ldd	r22, Y+35	; 0x23
    12fa:	7c a1       	ldd	r23, Y+36	; 0x24
    12fc:	8d a1       	ldd	r24, Y+37	; 0x25
    12fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	2c f4       	brge	.+10     	; 0x131a <CLCD_voidINIT+0x150>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9a a3       	std	Y+34, r25	; 0x22
    1316:	89 a3       	std	Y+33, r24	; 0x21
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <CLCD_voidINIT+0x1ce>
	else if (__tmp > 65535)
    131a:	6b a1       	ldd	r22, Y+35	; 0x23
    131c:	7c a1       	ldd	r23, Y+36	; 0x24
    131e:	8d a1       	ldd	r24, Y+37	; 0x25
    1320:	9e a1       	ldd	r25, Y+38	; 0x26
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	4c f5       	brge	.+82     	; 0x1384 <CLCD_voidINIT+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	6f a1       	ldd	r22, Y+39	; 0x27
    1334:	78 a5       	ldd	r23, Y+40	; 0x28
    1336:	89 a5       	ldd	r24, Y+41	; 0x29
    1338:	9a a5       	ldd	r25, Y+42	; 0x2a
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9a a3       	std	Y+34, r25	; 0x22
    1358:	89 a3       	std	Y+33, r24	; 0x21
    135a:	0f c0       	rjmp	.+30     	; 0x137a <CLCD_voidINIT+0x1b0>
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	98 a3       	std	Y+32, r25	; 0x20
    1362:	8f 8f       	std	Y+31, r24	; 0x1f
    1364:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1366:	98 a1       	ldd	r25, Y+32	; 0x20
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <CLCD_voidINIT+0x19e>
    136c:	98 a3       	std	Y+32, r25	; 0x20
    136e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	89 a1       	ldd	r24, Y+33	; 0x21
    1372:	9a a1       	ldd	r25, Y+34	; 0x22
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	9a a3       	std	Y+34, r25	; 0x22
    1378:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	9a a1       	ldd	r25, Y+34	; 0x22
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f7       	brne	.-38     	; 0x135c <CLCD_voidINIT+0x192>
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <CLCD_voidINIT+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1384:	6b a1       	ldd	r22, Y+35	; 0x23
    1386:	7c a1       	ldd	r23, Y+36	; 0x24
    1388:	8d a1       	ldd	r24, Y+37	; 0x25
    138a:	9e a1       	ldd	r25, Y+38	; 0x26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9a a3       	std	Y+34, r25	; 0x22
    1396:	89 a3       	std	Y+33, r24	; 0x21
    1398:	89 a1       	ldd	r24, Y+33	; 0x21
    139a:	9a a1       	ldd	r25, Y+34	; 0x22
    139c:	9e 8f       	std	Y+30, r25	; 0x1e
    139e:	8d 8f       	std	Y+29, r24	; 0x1d
    13a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <CLCD_voidINIT+0x1da>
    13a8:	9e 8f       	std	Y+30, r25	; 0x1e
    13aa:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
	 /* Display ON/OFF Control - no cursor - no blink */
	 CLCD_voidSendCommand(Display_Control);
    13ac:	8c e0       	ldi	r24, 0x0C	; 12
    13ae:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidSendCommand>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e8       	ldi	r26, 0x80	; 128
    13b8:	bf e3       	ldi	r27, 0x3F	; 63
    13ba:	89 8f       	std	Y+25, r24	; 0x19
    13bc:	9a 8f       	std	Y+26, r25	; 0x1a
    13be:	ab 8f       	std	Y+27, r26	; 0x1b
    13c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	69 8d       	ldd	r22, Y+25	; 0x19
    13c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a ef       	ldi	r20, 0xFA	; 250
    13d0:	54 e4       	ldi	r21, 0x44	; 68
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8d 8b       	std	Y+21, r24	; 0x15
    13dc:	9e 8b       	std	Y+22, r25	; 0x16
    13de:	af 8b       	std	Y+23, r26	; 0x17
    13e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <CLCD_voidINIT+0x23a>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <CLCD_voidINIT+0x2b8>
	else if (__tmp > 65535)
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <CLCD_voidINIT+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	69 8d       	ldd	r22, Y+25	; 0x19
    141e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1420:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1422:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <CLCD_voidINIT+0x29a>
    1446:	88 ec       	ldi	r24, 0xC8	; 200
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a 8b       	std	Y+18, r25	; 0x12
    144c:	89 8b       	std	Y+17, r24	; 0x11
    144e:	89 89       	ldd	r24, Y+17	; 0x11
    1450:	9a 89       	ldd	r25, Y+18	; 0x12
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <CLCD_voidINIT+0x288>
    1456:	9a 8b       	std	Y+18, r25	; 0x12
    1458:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <CLCD_voidINIT+0x27c>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <CLCD_voidINIT+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6d 89       	ldd	r22, Y+21	; 0x15
    1470:	7e 89       	ldd	r23, Y+22	; 0x16
    1472:	8f 89       	ldd	r24, Y+23	; 0x17
    1474:	98 8d       	ldd	r25, Y+24	; 0x18
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	8b 89       	ldd	r24, Y+19	; 0x13
    1484:	9c 89       	ldd	r25, Y+20	; 0x14
    1486:	98 8b       	std	Y+16, r25	; 0x10
    1488:	8f 87       	std	Y+15, r24	; 0x0f
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	98 89       	ldd	r25, Y+16	; 0x10
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <CLCD_voidINIT+0x2c4>
    1492:	98 8b       	std	Y+16, r25	; 0x10
    1494:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1);
	 /* Display Clear */

	 CLCD_voidSendCommand(Display_Clear);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidSendCommand>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e8       	ldi	r26, 0x80	; 128
    14a2:	bf e3       	ldi	r27, 0x3F	; 63
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <CLCD_voidINIT+0x324>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <CLCD_voidINIT+0x3a2>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <CLCD_voidINIT+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <CLCD_voidINIT+0x384>
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <CLCD_voidINIT+0x372>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <CLCD_voidINIT+0x366>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <CLCD_voidINIT+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <CLCD_voidINIT+0x3ae>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);
 }
    1580:	e8 96       	adiw	r28, 0x38	; 56
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <CLCD_voidSendString>:
 void CLCD_voidSendString(u8 * Copy_u8String)
 {
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <CLCD_voidSendString+0x6>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9b 83       	std	Y+3, r25	; 0x03
    15a0:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8Counter = 0 ;
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <CLCD_voidSendString+0x30>

	while(Copy_u8String[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	fc 01       	movw	r30, r24
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	80 81       	ld	r24, Z
    15b8:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
		Local_u8Counter++ ;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	89 83       	std	Y+1, r24	; 0x01
 }
 void CLCD_voidSendString(u8 * Copy_u8String)
 {
	 u8 Local_u8Counter = 0 ;

	while(Copy_u8String[Local_u8Counter] != '\0')
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	fc 01       	movw	r30, r24
    15ce:	e2 0f       	add	r30, r18
    15d0:	f3 1f       	adc	r31, r19
    15d2:	80 81       	ld	r24, Z
    15d4:	88 23       	and	r24, r24
    15d6:	39 f7       	brne	.-50     	; 0x15a6 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Counter]);
		Local_u8Counter++ ;
	}

 }
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <CLCD_voidGOTOXY>:

 void CLCD_voidGOTOXY(u8 Copy_u8row , u8 Copy_u8col)
 {
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <CLCD_voidGOTOXY+0x6>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    15f2:	6b 83       	std	Y+3, r22	; 0x03
	 u8 Local_u8Address = 0xff;
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	89 83       	std	Y+1, r24	; 0x01

	 if(Copy_u8row>1)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	10 f0       	brcs	.+4      	; 0x1602 <CLCD_voidGOTOXY+0x1e>
	 	 {
		 	 Copy_u8row=1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8a 83       	std	Y+2, r24	; 0x02
	 	 }

	 Local_u8Address = 128 + (64 * Copy_u8row) + Copy_u8col  ;
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 96       	adiw	r24, 0x02	; 2
    160a:	00 24       	eor	r0, r0
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	07 94       	ror	r0
    1612:	96 95       	lsr	r25
    1614:	87 95       	ror	r24
    1616:	07 94       	ror	r0
    1618:	98 2f       	mov	r25, r24
    161a:	80 2d       	mov	r24, r0
    161c:	98 2f       	mov	r25, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	89 0f       	add	r24, r25
    1622:	89 83       	std	Y+1, r24	; 0x01
	 CLCD_voidSendCommand(Local_u8Address);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidSendCommand>
 }
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <CLCD_voidWriteNumber>:


 void CLCD_voidWriteNumber(u32 Copy_u32Number , u8 Copy_u8X , u8 Copy_u8Y ){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	2f 97       	sbiw	r28, 0x0f	; 15
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	6e 83       	std	Y+6, r22	; 0x06
    164c:	7f 83       	std	Y+7, r23	; 0x07
    164e:	88 87       	std	Y+8, r24	; 0x08
    1650:	99 87       	std	Y+9, r25	; 0x09
    1652:	4a 87       	std	Y+10, r20	; 0x0a
    1654:	2b 87       	std	Y+11, r18	; 0x0b

 	u8 Local_u8Digits = 0 ;
    1656:	1d 82       	std	Y+5, r1	; 0x05
 	u32  Local_u32TempNumber = Copy_u32Number ;
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	a8 85       	ldd	r26, Y+8	; 0x08
    165e:	b9 85       	ldd	r27, Y+9	; 0x09
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	ab 83       	std	Y+3, r26	; 0x03
    1666:	bc 83       	std	Y+4, r27	; 0x04

 	if(Copy_u32Number == 0 ){
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	a8 85       	ldd	r26, Y+8	; 0x08
    166e:	b9 85       	ldd	r27, Y+9	; 0x09
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	a1 05       	cpc	r26, r1
    1674:	b1 05       	cpc	r27, r1
    1676:	e9 f4       	brne	.+58     	; 0x16b2 <CLCD_voidWriteNumber+0x7c>
 		CLCD_voidGOTOXY(Copy_u8X,Copy_u8Y);
    1678:	8a 85       	ldd	r24, Y+10	; 0x0a
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>
 		CLCD_voidSendData('0');
    1680:	80 e3       	ldi	r24, 0x30	; 48
    1682:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    1686:	ee c0       	rjmp	.+476    	; 0x1864 <CLCD_voidWriteNumber+0x22e>
 	}else {

 	while(Local_u32TempNumber != 0){
 		Local_u32TempNumber /= 10 ;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	ab 81       	ldd	r26, Y+3	; 0x03
    168e:	bc 81       	ldd	r27, Y+4	; 0x04
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__udivmodsi4>
    16a0:	da 01       	movw	r26, r20
    16a2:	c9 01       	movw	r24, r18
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	ab 83       	std	Y+3, r26	; 0x03
    16aa:	bc 83       	std	Y+4, r27	; 0x04
 		Local_u8Digits++ ;
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	8f 5f       	subi	r24, 0xFF	; 255
    16b0:	8d 83       	std	Y+5, r24	; 0x05
 	if(Copy_u32Number == 0 ){
 		CLCD_voidGOTOXY(Copy_u8X,Copy_u8Y);
 		CLCD_voidSendData('0');
 	}else {

 	while(Local_u32TempNumber != 0){
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	ab 81       	ldd	r26, Y+3	; 0x03
    16b8:	bc 81       	ldd	r27, Y+4	; 0x04
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	19 f7       	brne	.-58     	; 0x1688 <CLCD_voidWriteNumber+0x52>
    16c2:	cc c0       	rjmp	.+408    	; 0x185c <CLCD_voidWriteNumber+0x226>
 		Local_u8Digits++ ;
 	}

 	for(Local_u8Digits ; Local_u8Digits > 0 ; Local_u8Digits-- ){

 		CLCD_voidGOTOXY(Copy_u8X, Copy_u8Y + Local_u8Digits - 1 );
    16c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	89 0f       	add	r24, r25
    16ca:	98 2f       	mov	r25, r24
    16cc:	91 50       	subi	r25, 0x01	; 1
    16ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d0:	69 2f       	mov	r22, r25
    16d2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>

 		switch(Copy_u32Number % 10){
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	a8 85       	ldd	r26, Y+8	; 0x08
    16dc:	b9 85       	ldd	r27, Y+9	; 0x09
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__udivmodsi4>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8c 87       	std	Y+12, r24	; 0x0c
    16f4:	9d 87       	std	Y+13, r25	; 0x0d
    16f6:	ae 87       	std	Y+14, r26	; 0x0e
    16f8:	bf 87       	std	Y+15, r27	; 0x0f
    16fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    16fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    16fe:	ae 85       	ldd	r26, Y+14	; 0x0e
    1700:	bf 85       	ldd	r27, Y+15	; 0x0f
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	91 05       	cpc	r25, r1
    1706:	a1 05       	cpc	r26, r1
    1708:	b1 05       	cpc	r27, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <CLCD_voidWriteNumber+0xd8>
    170c:	7b c0       	rjmp	.+246    	; 0x1804 <CLCD_voidWriteNumber+0x1ce>
    170e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1710:	9d 85       	ldd	r25, Y+13	; 0x0d
    1712:	ae 85       	ldd	r26, Y+14	; 0x0e
    1714:	bf 85       	ldd	r27, Y+15	; 0x0f
    1716:	85 30       	cpi	r24, 0x05	; 5
    1718:	91 05       	cpc	r25, r1
    171a:	a1 05       	cpc	r26, r1
    171c:	b1 05       	cpc	r27, r1
    171e:	48 f5       	brcc	.+82     	; 0x1772 <CLCD_voidWriteNumber+0x13c>
    1720:	8c 85       	ldd	r24, Y+12	; 0x0c
    1722:	9d 85       	ldd	r25, Y+13	; 0x0d
    1724:	ae 85       	ldd	r26, Y+14	; 0x0e
    1726:	bf 85       	ldd	r27, Y+15	; 0x0f
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	91 05       	cpc	r25, r1
    172c:	a1 05       	cpc	r26, r1
    172e:	b1 05       	cpc	r27, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <CLCD_voidWriteNumber+0xfe>
    1732:	5c c0       	rjmp	.+184    	; 0x17ec <CLCD_voidWriteNumber+0x1b6>
    1734:	8c 85       	ldd	r24, Y+12	; 0x0c
    1736:	9d 85       	ldd	r25, Y+13	; 0x0d
    1738:	ae 85       	ldd	r26, Y+14	; 0x0e
    173a:	bf 85       	ldd	r27, Y+15	; 0x0f
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	a1 05       	cpc	r26, r1
    1742:	b1 05       	cpc	r27, r1
    1744:	08 f4       	brcc	.+2      	; 0x1748 <CLCD_voidWriteNumber+0x112>
    1746:	4e c0       	rjmp	.+156    	; 0x17e4 <CLCD_voidWriteNumber+0x1ae>
    1748:	8c 85       	ldd	r24, Y+12	; 0x0c
    174a:	9d 85       	ldd	r25, Y+13	; 0x0d
    174c:	ae 85       	ldd	r26, Y+14	; 0x0e
    174e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	a1 05       	cpc	r26, r1
    1756:	b1 05       	cpc	r27, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <CLCD_voidWriteNumber+0x126>
    175a:	4c c0       	rjmp	.+152    	; 0x17f4 <CLCD_voidWriteNumber+0x1be>
    175c:	8c 85       	ldd	r24, Y+12	; 0x0c
    175e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1760:	ae 85       	ldd	r26, Y+14	; 0x0e
    1762:	bf 85       	ldd	r27, Y+15	; 0x0f
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	a1 05       	cpc	r26, r1
    176a:	b1 05       	cpc	r27, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <CLCD_voidWriteNumber+0x13a>
    176e:	46 c0       	rjmp	.+140    	; 0x17fc <CLCD_voidWriteNumber+0x1c6>
    1770:	60 c0       	rjmp	.+192    	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
    1772:	8c 85       	ldd	r24, Y+12	; 0x0c
    1774:	9d 85       	ldd	r25, Y+13	; 0x0d
    1776:	ae 85       	ldd	r26, Y+14	; 0x0e
    1778:	bf 85       	ldd	r27, Y+15	; 0x0f
    177a:	87 30       	cpi	r24, 0x07	; 7
    177c:	91 05       	cpc	r25, r1
    177e:	a1 05       	cpc	r26, r1
    1780:	b1 05       	cpc	r27, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <CLCD_voidWriteNumber+0x150>
    1784:	4b c0       	rjmp	.+150    	; 0x181c <CLCD_voidWriteNumber+0x1e6>
    1786:	8c 85       	ldd	r24, Y+12	; 0x0c
    1788:	9d 85       	ldd	r25, Y+13	; 0x0d
    178a:	ae 85       	ldd	r26, Y+14	; 0x0e
    178c:	bf 85       	ldd	r27, Y+15	; 0x0f
    178e:	88 30       	cpi	r24, 0x08	; 8
    1790:	91 05       	cpc	r25, r1
    1792:	a1 05       	cpc	r26, r1
    1794:	b1 05       	cpc	r27, r1
    1796:	98 f4       	brcc	.+38     	; 0x17be <CLCD_voidWriteNumber+0x188>
    1798:	8c 85       	ldd	r24, Y+12	; 0x0c
    179a:	9d 85       	ldd	r25, Y+13	; 0x0d
    179c:	ae 85       	ldd	r26, Y+14	; 0x0e
    179e:	bf 85       	ldd	r27, Y+15	; 0x0f
    17a0:	85 30       	cpi	r24, 0x05	; 5
    17a2:	91 05       	cpc	r25, r1
    17a4:	a1 05       	cpc	r26, r1
    17a6:	b1 05       	cpc	r27, r1
    17a8:	89 f1       	breq	.+98     	; 0x180c <CLCD_voidWriteNumber+0x1d6>
    17aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ae:	ae 85       	ldd	r26, Y+14	; 0x0e
    17b0:	bf 85       	ldd	r27, Y+15	; 0x0f
    17b2:	86 30       	cpi	r24, 0x06	; 6
    17b4:	91 05       	cpc	r25, r1
    17b6:	a1 05       	cpc	r26, r1
    17b8:	b1 05       	cpc	r27, r1
    17ba:	61 f1       	breq	.+88     	; 0x1814 <CLCD_voidWriteNumber+0x1de>
    17bc:	3a c0       	rjmp	.+116    	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
    17be:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    17c2:	ae 85       	ldd	r26, Y+14	; 0x0e
    17c4:	bf 85       	ldd	r27, Y+15	; 0x0f
    17c6:	88 30       	cpi	r24, 0x08	; 8
    17c8:	91 05       	cpc	r25, r1
    17ca:	a1 05       	cpc	r26, r1
    17cc:	b1 05       	cpc	r27, r1
    17ce:	51 f1       	breq	.+84     	; 0x1824 <CLCD_voidWriteNumber+0x1ee>
    17d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    17d4:	ae 85       	ldd	r26, Y+14	; 0x0e
    17d6:	bf 85       	ldd	r27, Y+15	; 0x0f
    17d8:	89 30       	cpi	r24, 0x09	; 9
    17da:	91 05       	cpc	r25, r1
    17dc:	a1 05       	cpc	r26, r1
    17de:	b1 05       	cpc	r27, r1
    17e0:	29 f1       	breq	.+74     	; 0x182c <CLCD_voidWriteNumber+0x1f6>
    17e2:	27 c0       	rjmp	.+78     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 0 : CLCD_voidSendData('0'); break ;
    17e4:	80 e3       	ldi	r24, 0x30	; 48
    17e6:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    17ea:	23 c0       	rjmp	.+70     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 1 : CLCD_voidSendData('1'); break ;
    17ec:	81 e3       	ldi	r24, 0x31	; 49
    17ee:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    17f2:	1f c0       	rjmp	.+62     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 2 : CLCD_voidSendData('2'); break ;
    17f4:	82 e3       	ldi	r24, 0x32	; 50
    17f6:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    17fa:	1b c0       	rjmp	.+54     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 3 : CLCD_voidSendData('3'); break ;
    17fc:	83 e3       	ldi	r24, 0x33	; 51
    17fe:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    1802:	17 c0       	rjmp	.+46     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 4 : CLCD_voidSendData('4'); break ;
    1804:	84 e3       	ldi	r24, 0x34	; 52
    1806:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    180a:	13 c0       	rjmp	.+38     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 5 : CLCD_voidSendData('5'); break ;
    180c:	85 e3       	ldi	r24, 0x35	; 53
    180e:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 6 : CLCD_voidSendData('6'); break ;
    1814:	86 e3       	ldi	r24, 0x36	; 54
    1816:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 7 : CLCD_voidSendData('7'); break ;
    181c:	87 e3       	ldi	r24, 0x37	; 55
    181e:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 8 : CLCD_voidSendData('8'); break ;
    1824:	88 e3       	ldi	r24, 0x38	; 56
    1826:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <CLCD_voidWriteNumber+0x1fc>
 		case 9 : CLCD_voidSendData('9'); break ;
    182c:	89 e3       	ldi	r24, 0x39	; 57
    182e:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>
 		}
 		Copy_u32Number /= 10 ;
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	9f 81       	ldd	r25, Y+7	; 0x07
    1836:	a8 85       	ldd	r26, Y+8	; 0x08
    1838:	b9 85       	ldd	r27, Y+9	; 0x09
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	50 e0       	ldi	r21, 0x00	; 0
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__udivmodsi4>
    184a:	da 01       	movw	r26, r20
    184c:	c9 01       	movw	r24, r18
    184e:	8e 83       	std	Y+6, r24	; 0x06
    1850:	9f 83       	std	Y+7, r25	; 0x07
    1852:	a8 87       	std	Y+8, r26	; 0x08
    1854:	b9 87       	std	Y+9, r27	; 0x09
 	while(Local_u32TempNumber != 0){
 		Local_u32TempNumber /= 10 ;
 		Local_u8Digits++ ;
 	}

 	for(Local_u8Digits ; Local_u8Digits > 0 ; Local_u8Digits-- ){
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	88 23       	and	r24, r24
    1860:	09 f0       	breq	.+2      	; 0x1864 <CLCD_voidWriteNumber+0x22e>
    1862:	30 cf       	rjmp	.-416    	; 0x16c4 <CLCD_voidWriteNumber+0x8e>
 		case 9 : CLCD_voidSendData('9'); break ;
 		}
 		Copy_u32Number /= 10 ;
 	}
 	}
 }
    1864:	2f 96       	adiw	r28, 0x0f	; 15
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <CLCD_clear>:


 void CLCD_clear(void)
 {
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	 CLCD_voidSendCommand(Display_Clear);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	0e 94 a9 07 	call	0xf52	; 0xf52 <CLCD_voidSendCommand>
 }
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <DIO_SetPort_Direction>:
#include "DIO_private.h"
#include "DIO_interface.h"


void DIO_SetPort_Direction(u8 Copy_u8PortNum , u8 Copy_u8Direction)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <DIO_SetPort_Direction+0x6>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <DIO_SetPort_Direction+0x8>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <DIO_SetPort_Direction+0x58>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <DIO_SetPort_Direction+0x38>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <DIO_SetPort_Direction+0x4e>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <DIO_SetPort_Direction+0x74>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <DIO_SetPort_Direction+0x62>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <DIO_SetPort_Direction+0x6c>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <DIO_SetPort_Direction+0x74>
	{
	case DIO_PORTA : DDRA = Copy_u8Direction ;
    18d8:	ea e3       	ldi	r30, 0x3A	; 58
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTB : DDRB = Copy_u8Direction ;
    18e2:	e7 e3       	ldi	r30, 0x37	; 55
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTC : DDRC = Copy_u8Direction ;
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <DIO_SetPort_Direction+0x74>
	break ;
	case DIO_PORTD : DDRD = Copy_u8Direction ;
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
	break ;
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <DIO_SetPort_value>:

void DIO_SetPort_value(u8 Copy_u8PortNum , u8 Copy_u8PortValue)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <DIO_SetPort_value+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <DIO_SetPort_value+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	3c 83       	std	Y+4, r19	; 0x04
    1924:	2b 83       	std	Y+3, r18	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	d1 f0       	breq	.+52     	; 0x1964 <DIO_SetPort_value+0x58>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	2c f4       	brge	.+10     	; 0x1944 <DIO_SetPort_value+0x38>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	61 f0       	breq	.+24     	; 0x195a <DIO_SetPort_value+0x4e>
    1942:	1e c0       	rjmp	.+60     	; 0x1980 <DIO_SetPort_value+0x74>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <DIO_SetPort_value+0x62>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	91 05       	cpc	r25, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <DIO_SetPort_value+0x6c>
    1958:	13 c0       	rjmp	.+38     	; 0x1980 <DIO_SetPort_value+0x74>
		{
		case DIO_PORTA : PORTA = Copy_u8PortValue ;
    195a:	eb e3       	ldi	r30, 0x3B	; 59
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <DIO_SetPort_value+0x74>
		break ;
		case DIO_PORTB : PORTB = Copy_u8PortValue ;
    1964:	e8 e3       	ldi	r30, 0x38	; 56
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <DIO_SetPort_value+0x74>
		break ;
		case DIO_PORTC : PORTC = Copy_u8PortValue ;
    196e:	e5 e3       	ldi	r30, 0x35	; 53
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <DIO_SetPort_value+0x74>
		break ;
		case DIO_PORTD : PORTD = Copy_u8PortValue ;
    1978:	e2 e3       	ldi	r30, 0x32	; 50
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
		break ;
		}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <DIO_SetPin_Direction>:



void DIO_SetPin_Direction(u8 Copy_u8PortNum , u8 Copy_u8PinNum , u8 Copy_u8Direction)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	27 97       	sbiw	r28, 0x07	; 7
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	6a 83       	std	Y+2, r22	; 0x02
    19a6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == PIN_OUTPUT)
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <DIO_SetPin_Direction+0x22>
    19ae:	6f c0       	rjmp	.+222    	; 0x1a8e <DIO_SetPin_Direction+0x100>
	{
		switch(Copy_u8PortNum)
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3f 83       	std	Y+7, r19	; 0x07
    19b8:	2e 83       	std	Y+6, r18	; 0x06
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	91 05       	cpc	r25, r1
    19c2:	49 f1       	breq	.+82     	; 0x1a16 <DIO_SetPin_Direction+0x88>
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	22 30       	cpi	r18, 0x02	; 2
    19ca:	31 05       	cpc	r19, r1
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <DIO_SetPin_Direction+0x4a>
    19ce:	8e 81       	ldd	r24, Y+6	; 0x06
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	61 f0       	breq	.+24     	; 0x19ee <DIO_SetPin_Direction+0x60>
    19d6:	d2 c0       	rjmp	.+420    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
    19d8:	2e 81       	ldd	r18, Y+6	; 0x06
    19da:	3f 81       	ldd	r19, Y+7	; 0x07
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	31 05       	cpc	r19, r1
    19e0:	71 f1       	breq	.+92     	; 0x1a3e <DIO_SetPin_Direction+0xb0>
    19e2:	8e 81       	ldd	r24, Y+6	; 0x06
    19e4:	9f 81       	ldd	r25, Y+7	; 0x07
    19e6:	83 30       	cpi	r24, 0x03	; 3
    19e8:	91 05       	cpc	r25, r1
    19ea:	e9 f1       	breq	.+122    	; 0x1a66 <DIO_SetPin_Direction+0xd8>
    19ec:	c7 c0       	rjmp	.+398    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
		{
		case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNum) ;
    19ee:	aa e3       	ldi	r26, 0x3A	; 58
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ea e3       	ldi	r30, 0x3A	; 58
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_SetPin_Direction+0x7e>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_SetPin_Direction+0x7a>
    1a10:	84 2b       	or	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	b3 c0       	rjmp	.+358    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNum) ;
    1a16:	a7 e3       	ldi	r26, 0x37	; 55
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e7 e3       	ldi	r30, 0x37	; 55
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_SetPin_Direction+0xa6>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_SetPin_Direction+0xa2>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	9f c0       	rjmp	.+318    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNum) ;
    1a3e:	a4 e3       	ldi	r26, 0x34	; 52
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e4 e3       	ldi	r30, 0x34	; 52
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_SetPin_Direction+0xce>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_SetPin_Direction+0xca>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	8b c0       	rjmp	.+278    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
		break ;
		case DIO_PORTD : SET_BIT(DDRD,Copy_u8PinNum) ;
    1a66:	a1 e3       	ldi	r26, 0x31	; 49
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_SetPin_Direction+0xf6>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_SetPin_Direction+0xf2>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	77 c0       	rjmp	.+238    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
		break ;
		}

	}
	else if(Copy_u8Direction == PIN_INPUT)
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 23       	and	r24, r24
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <DIO_SetPin_Direction+0x108>
    1a94:	73 c0       	rjmp	.+230    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
	{
		switch(Copy_u8PortNum)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3d 83       	std	Y+5, r19	; 0x05
    1a9e:	2c 83       	std	Y+4, r18	; 0x04
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	59 f1       	breq	.+86     	; 0x1b00 <DIO_SetPin_Direction+0x172>
    1aaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1aac:	3d 81       	ldd	r19, Y+5	; 0x05
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <DIO_SetPin_Direction+0x130>
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <DIO_SetPin_Direction+0x148>
    1abc:	5f c0       	rjmp	.+190    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
    1abe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	89 f1       	breq	.+98     	; 0x1b2a <DIO_SetPin_Direction+0x19c>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <DIO_SetPin_Direction+0x146>
    1ad2:	40 c0       	rjmp	.+128    	; 0x1b54 <DIO_SetPin_Direction+0x1c6>
    1ad4:	53 c0       	rjmp	.+166    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNum) ;
    1ad6:	aa e3       	ldi	r26, 0x3A	; 58
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ea e3       	ldi	r30, 0x3A	; 58
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <DIO_SetPin_Direction+0x166>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <DIO_SetPin_Direction+0x162>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	3e c0       	rjmp	.+124    	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
				break ;
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNum) ;
    1b00:	a7 e3       	ldi	r26, 0x37	; 55
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_SetPin_Direction+0x190>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_SetPin_Direction+0x18c>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	29 c0       	rjmp	.+82     	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
				break ;
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNum) ;
    1b2a:	a4 e3       	ldi	r26, 0x34	; 52
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e4 e3       	ldi	r30, 0x34	; 52
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_SetPin_Direction+0x1ba>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_SetPin_Direction+0x1b6>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <DIO_SetPin_Direction+0x1ee>
				break ;
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PinNum) ;
    1b54:	a1 e3       	ldi	r26, 0x31	; 49
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e1 e3       	ldi	r30, 0x31	; 49
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_SetPin_Direction+0x1e4>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_SetPin_Direction+0x1e0>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
				break ;
			}
	}

}
    1b7c:	27 96       	adiw	r28, 0x07	; 7
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <DIO_SetPinValue>:

void DIO_SetPinValue(u8 Copy_u8PortNum , u8 Copy_u8PinNum , u8 Copy_u8PinValue)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	27 97       	sbiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
    1ba6:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8PinValue == PIN_HIGH)
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <DIO_SetPinValue+0x22>
    1bae:	6f c0       	rjmp	.+222    	; 0x1c8e <DIO_SetPinValue+0x100>
			{
				/* Check on the Required PORT Number */
				switch (Copy_u8PortNum)
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3f 83       	std	Y+7, r19	; 0x07
    1bb8:	2e 83       	std	Y+6, r18	; 0x06
    1bba:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	49 f1       	breq	.+82     	; 0x1c16 <DIO_SetPinValue+0x88>
    1bc4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <DIO_SetPinValue+0x4a>
    1bce:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <DIO_SetPinValue+0x60>
    1bd6:	d2 c0       	rjmp	.+420    	; 0x1d7c <DIO_SetPinValue+0x1ee>
    1bd8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bda:	3f 81       	ldd	r19, Y+7	; 0x07
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	71 f1       	breq	.+92     	; 0x1c3e <DIO_SetPinValue+0xb0>
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	9f 81       	ldd	r25, Y+7	; 0x07
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	e9 f1       	breq	.+122    	; 0x1c66 <DIO_SetPinValue+0xd8>
    1bec:	c7 c0       	rjmp	.+398    	; 0x1d7c <DIO_SetPinValue+0x1ee>
				{
					case DIO_PORTA: SET_BIT(PORTA,Copy_u8PinNum); break;
    1bee:	ab e3       	ldi	r26, 0x3B	; 59
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_SetPinValue+0x7e>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_SetPinValue+0x7a>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	b3 c0       	rjmp	.+358    	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTB: SET_BIT(PORTB,Copy_u8PinNum); break;
    1c16:	a8 e3       	ldi	r26, 0x38	; 56
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_SetPinValue+0xa6>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_SetPinValue+0xa2>
    1c38:	84 2b       	or	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	9f c0       	rjmp	.+318    	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTC: SET_BIT(PORTC,Copy_u8PinNum); break;
    1c3e:	a5 e3       	ldi	r26, 0x35	; 53
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e5 e3       	ldi	r30, 0x35	; 53
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_SetPinValue+0xce>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_SetPinValue+0xca>
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	8b c0       	rjmp	.+278    	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTD: SET_BIT(PORTD,Copy_u8PinNum); break;
    1c66:	a2 e3       	ldi	r26, 0x32	; 50
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e2 e3       	ldi	r30, 0x32	; 50
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_SetPinValue+0xf6>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_SetPinValue+0xf2>
    1c88:	84 2b       	or	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	77 c0       	rjmp	.+238    	; 0x1d7c <DIO_SetPinValue+0x1ee>
				}

			}

			else if (Copy_u8PinValue == PIN_LOW)
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 23       	and	r24, r24
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <DIO_SetPinValue+0x108>
    1c94:	73 c0       	rjmp	.+230    	; 0x1d7c <DIO_SetPinValue+0x1ee>
			{
				/* Check on the Required PORT Number */
				switch (Copy_u8PortNum)
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	3d 83       	std	Y+5, r19	; 0x05
    1c9e:	2c 83       	std	Y+4, r18	; 0x04
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	59 f1       	breq	.+86     	; 0x1d00 <DIO_SetPinValue+0x172>
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <DIO_SetPinValue+0x130>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	69 f0       	breq	.+26     	; 0x1cd6 <DIO_SetPinValue+0x148>
    1cbc:	5f c0       	rjmp	.+190    	; 0x1d7c <DIO_SetPinValue+0x1ee>
    1cbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	89 f1       	breq	.+98     	; 0x1d2a <DIO_SetPinValue+0x19c>
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	91 05       	cpc	r25, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <DIO_SetPinValue+0x146>
    1cd2:	40 c0       	rjmp	.+128    	; 0x1d54 <DIO_SetPinValue+0x1c6>
    1cd4:	53 c0       	rjmp	.+166    	; 0x1d7c <DIO_SetPinValue+0x1ee>
				{
					case DIO_PORTA: CLR_BIT(PORTA,Copy_u8PinNum); break;
    1cd6:	ab e3       	ldi	r26, 0x3B	; 59
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	eb e3       	ldi	r30, 0x3B	; 59
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_SetPinValue+0x166>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_SetPinValue+0x162>
    1cf8:	80 95       	com	r24
    1cfa:	84 23       	and	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	3e c0       	rjmp	.+124    	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTB: CLR_BIT(PORTB,Copy_u8PinNum); break;
    1d00:	a8 e3       	ldi	r26, 0x38	; 56
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e3       	ldi	r30, 0x38	; 56
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_SetPinValue+0x190>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_SetPinValue+0x18c>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	29 c0       	rjmp	.+82     	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTC: CLR_BIT(PORTC,Copy_u8PinNum); break;
    1d2a:	a5 e3       	ldi	r26, 0x35	; 53
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e3       	ldi	r30, 0x35	; 53
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_SetPinValue+0x1ba>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_SetPinValue+0x1b6>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	14 c0       	rjmp	.+40     	; 0x1d7c <DIO_SetPinValue+0x1ee>
					case DIO_PORTD: CLR_BIT(PORTD,Copy_u8PinNum); break;
    1d54:	a2 e3       	ldi	r26, 0x32	; 50
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_SetPinValue+0x1e4>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_SetPinValue+0x1e0>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
				}
			}

}
    1d7c:	27 96       	adiw	r28, 0x07	; 7
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <DIO_GetPinValue>:

u8 	 DIO_GetPinValue(u8 Copy_u8PortNum , u8 Copy_u8PinNum )
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <DIO_GetPinValue+0x6>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <DIO_GetPinValue+0x8>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0 ;
    1da0:	19 82       	std	Y+1, r1	; 0x01

	/* Check on the Required PORT Number */
			switch (Copy_u8PortNum)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3d 83       	std	Y+5, r19	; 0x05
    1daa:	2c 83       	std	Y+4, r18	; 0x04
    1dac:	4c 81       	ldd	r20, Y+4	; 0x04
    1dae:	5d 81       	ldd	r21, Y+5	; 0x05
    1db0:	41 30       	cpi	r20, 0x01	; 1
    1db2:	51 05       	cpc	r21, r1
    1db4:	41 f1       	breq	.+80     	; 0x1e06 <DIO_GetPinValue+0x78>
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	34 f4       	brge	.+12     	; 0x1dcc <DIO_GetPinValue+0x3e>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <DIO_GetPinValue+0x54>
    1dca:	52 c0       	rjmp	.+164    	; 0x1e70 <DIO_GetPinValue+0xe2>
    1dcc:	4c 81       	ldd	r20, Y+4	; 0x04
    1dce:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd0:	42 30       	cpi	r20, 0x02	; 2
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	51 f1       	breq	.+84     	; 0x1e2a <DIO_GetPinValue+0x9c>
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	b9 f1       	breq	.+110    	; 0x1e4e <DIO_GetPinValue+0xc0>
    1de0:	47 c0       	rjmp	.+142    	; 0x1e70 <DIO_GetPinValue+0xe2>
			{
				case DIO_PORTA: Local_u8Result= GET_BIT(PINA,Copy_u8PinNum);
    1de2:	e9 e3       	ldi	r30, 0x39	; 57
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_GetPinValue+0x6c>
    1df6:	55 95       	asr	r21
    1df8:	47 95       	ror	r20
    1dfa:	8a 95       	dec	r24
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <DIO_GetPinValue+0x68>
    1dfe:	ca 01       	movw	r24, r20
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	35 c0       	rjmp	.+106    	; 0x1e70 <DIO_GetPinValue+0xe2>
				break;
				case DIO_PORTB: Local_u8Result= GET_BIT(PINB,Copy_u8PinNum);
    1e06:	e6 e3       	ldi	r30, 0x36	; 54
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_GetPinValue+0x90>
    1e1a:	55 95       	asr	r21
    1e1c:	47 95       	ror	r20
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_GetPinValue+0x8c>
    1e22:	ca 01       	movw	r24, r20
    1e24:	81 70       	andi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	23 c0       	rjmp	.+70     	; 0x1e70 <DIO_GetPinValue+0xe2>
				break;
				case DIO_PORTC: Local_u8Result= GET_BIT(PINC,Copy_u8PinNum);
    1e2a:	e3 e3       	ldi	r30, 0x33	; 51
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_GetPinValue+0xb4>
    1e3e:	55 95       	asr	r21
    1e40:	47 95       	ror	r20
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_GetPinValue+0xb0>
    1e46:	ca 01       	movw	r24, r20
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	11 c0       	rjmp	.+34     	; 0x1e70 <DIO_GetPinValue+0xe2>
				break;
				case DIO_PORTD: Local_u8Result= GET_BIT(PIND,Copy_u8PinNum);
    1e4e:	e0 e3       	ldi	r30, 0x30	; 48
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_GetPinValue+0xd8>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <DIO_GetPinValue+0xd4>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
				break;
			}

		return Local_u8Result;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <DIO_VoidGetPinValue>:

void DIO_VoidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *pu8Data)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <DIO_VoidGetPinValue+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <DIO_VoidGetPinValue+0x8>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <DIO_VoidGetPinValue+0xa>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	6a 83       	std	Y+2, r22	; 0x02
    1e94:	5c 83       	std	Y+4, r21	; 0x04
    1e96:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8Port)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3e 83       	std	Y+6, r19	; 0x06
    1ea0:	2d 83       	std	Y+5, r18	; 0x05
    1ea2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ea4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ea6:	41 30       	cpi	r20, 0x01	; 1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	59 f1       	breq	.+86     	; 0x1f02 <DIO_VoidGetPinValue+0x80>
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	34 f4       	brge	.+12     	; 0x1ec2 <DIO_VoidGetPinValue+0x40>
    1eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eba:	21 15       	cp	r18, r1
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	69 f0       	breq	.+26     	; 0x1eda <DIO_VoidGetPinValue+0x58>
    1ec0:	5b c0       	rjmp	.+182    	; 0x1f78 <DIO_VoidGetPinValue+0xf6>
    1ec2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ec4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ec6:	42 30       	cpi	r20, 0x02	; 2
    1ec8:	51 05       	cpc	r21, r1
    1eca:	79 f1       	breq	.+94     	; 0x1f2a <DIO_VoidGetPinValue+0xa8>
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <DIO_VoidGetPinValue+0x56>
    1ed6:	3d c0       	rjmp	.+122    	; 0x1f52 <DIO_VoidGetPinValue+0xd0>
    1ed8:	4f c0       	rjmp	.+158    	; 0x1f78 <DIO_VoidGetPinValue+0xf6>
    {
    case DIO_PORTA:
        *pu8Data = GET_BIT(PINA, Copy_u8Pin);
    1eda:	e9 e3       	ldi	r30, 0x39	; 57
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a9 01       	movw	r20, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_VoidGetPinValue+0x70>
    1eee:	55 95       	asr	r21
    1ef0:	47 95       	ror	r20
    1ef2:	8a 95       	dec	r24
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_VoidGetPinValue+0x6c>
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	eb 81       	ldd	r30, Y+3	; 0x03
    1efc:	fc 81       	ldd	r31, Y+4	; 0x04
    1efe:	80 83       	st	Z, r24
    1f00:	3b c0       	rjmp	.+118    	; 0x1f78 <DIO_VoidGetPinValue+0xf6>
        break;

    case DIO_PORTB:
        *pu8Data = GET_BIT(PINB, Copy_u8Pin);
    1f02:	e6 e3       	ldi	r30, 0x36	; 54
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a9 01       	movw	r20, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <DIO_VoidGetPinValue+0x98>
    1f16:	55 95       	asr	r21
    1f18:	47 95       	ror	r20
    1f1a:	8a 95       	dec	r24
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <DIO_VoidGetPinValue+0x94>
    1f1e:	ca 01       	movw	r24, r20
    1f20:	81 70       	andi	r24, 0x01	; 1
    1f22:	eb 81       	ldd	r30, Y+3	; 0x03
    1f24:	fc 81       	ldd	r31, Y+4	; 0x04
    1f26:	80 83       	st	Z, r24
    1f28:	27 c0       	rjmp	.+78     	; 0x1f78 <DIO_VoidGetPinValue+0xf6>
        break;

    case DIO_PORTC:
        *pu8Data = GET_BIT(PINC, Copy_u8Pin);
    1f2a:	e3 e3       	ldi	r30, 0x33	; 51
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a9 01       	movw	r20, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_VoidGetPinValue+0xc0>
    1f3e:	55 95       	asr	r21
    1f40:	47 95       	ror	r20
    1f42:	8a 95       	dec	r24
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <DIO_VoidGetPinValue+0xbc>
    1f46:	ca 01       	movw	r24, r20
    1f48:	81 70       	andi	r24, 0x01	; 1
    1f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4e:	80 83       	st	Z, r24
    1f50:	13 c0       	rjmp	.+38     	; 0x1f78 <DIO_VoidGetPinValue+0xf6>
        break;

    case DIO_PORTD:
        *pu8Data = GET_BIT(PIND, Copy_u8Pin);
    1f52:	e0 e3       	ldi	r30, 0x30	; 48
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <DIO_VoidGetPinValue+0xe8>
    1f66:	55 95       	asr	r21
    1f68:	47 95       	ror	r20
    1f6a:	8a 95       	dec	r24
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <DIO_VoidGetPinValue+0xe4>
    1f6e:	ca 01       	movw	r24, r20
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	80 83       	st	Z, r24
        break;
    }
}
    1f78:	26 96       	adiw	r28, 0x06	; 6
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1f92:	af e5       	ldi	r26, 0x5F	; 95
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ef e5       	ldi	r30, 0x5F	; 95
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 68       	ori	r24, 0x80	; 128
    1f9e:	8c 93       	st	X, r24
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1fae:	af e5       	ldi	r26, 0x5F	; 95
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ef e5       	ldi	r30, 0x5F	; 95
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8f 77       	andi	r24, 0x7F	; 127
    1fba:	8c 93       	st	X, r24
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <init_voidUsers>:

u8 enteredPin[5]; /*For Password */
u8 enteredUser = 0; /*For UserName */

void init_voidUsers(void)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	// Initialize users with default usernames and passwords
	strcpy(users[0].username, "ITI");
    1fca:	8b ea       	ldi	r24, 0xAB	; 171
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	20 e6       	ldi	r18, 0x60	; 96
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	44 e0       	ldi	r20, 0x04	; 4
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
	strcpy(users[0].password, "0000");
    1fdc:	85 eb       	ldi	r24, 0xB5	; 181
    1fde:	92 e0       	ldi	r25, 0x02	; 2
    1fe0:	24 e6       	ldi	r18, 0x64	; 100
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	45 e0       	ldi	r20, 0x05	; 5
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>

	strcpy(users[1].username, "Heba");
    1fee:	8f eb       	ldi	r24, 0xBF	; 191
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	29 e6       	ldi	r18, 0x69	; 105
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	45 e0       	ldi	r20, 0x05	; 5
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
	strcpy(users[1].password, "1234");
    2000:	89 ec       	ldi	r24, 0xC9	; 201
    2002:	92 e0       	ldi	r25, 0x02	; 2
    2004:	2e e6       	ldi	r18, 0x6E	; 110
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	b9 01       	movw	r22, r18
    200a:	45 e0       	ldi	r20, 0x05	; 5
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>

	strcpy(users[2].username, "Laila");
    2012:	83 ed       	ldi	r24, 0xD3	; 211
    2014:	92 e0       	ldi	r25, 0x02	; 2
    2016:	23 e7       	ldi	r18, 0x73	; 115
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	b9 01       	movw	r22, r18
    201c:	46 e0       	ldi	r20, 0x06	; 6
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
	strcpy(users[2].password, "5678");
    2024:	8d ed       	ldi	r24, 0xDD	; 221
    2026:	92 e0       	ldi	r25, 0x02	; 2
    2028:	29 e7       	ldi	r18, 0x79	; 121
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	b9 01       	movw	r22, r18
    202e:	45 e0       	ldi	r20, 0x05	; 5
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>

	strcpy(users[3].username, "Omar");
    2036:	87 ee       	ldi	r24, 0xE7	; 231
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	2e e7       	ldi	r18, 0x7E	; 126
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	45 e0       	ldi	r20, 0x05	; 5
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
	strcpy(users[3].password, "7777");
    2048:	81 ef       	ldi	r24, 0xF1	; 241
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	23 e8       	ldi	r18, 0x83	; 131
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	b9 01       	movw	r22, r18
    2052:	45 e0       	ldi	r20, 0x05	; 5
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <memcpy>
}
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <houseSystem>:

void houseSystem(void)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	6e 97       	sbiw	r28, 0x1e	; 30
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61

	/* Select the userName */
	CLCD_clear();
    2074:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
	CLCD_voidSendString("1-ITI. 2-Heba.");
    2078:	88 e8       	ldi	r24, 0x88	; 136
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
	CLCD_voidGOTOXY(1,0);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>
	CLCD_voidSendString("3-Laila. 4-Omar.");
    2088:	87 e9       	ldi	r24, 0x97	; 151
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	aa e7       	ldi	r26, 0x7A	; 122
    2096:	b4 e4       	ldi	r27, 0x44	; 68
    2098:	89 8f       	std	Y+25, r24	; 0x19
    209a:	9a 8f       	std	Y+26, r25	; 0x1a
    209c:	ab 8f       	std	Y+27, r26	; 0x1b
    209e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	69 8d       	ldd	r22, Y+25	; 0x19
    20a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <houseSystem+0x82>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <houseSystem+0x100>
	else if (__tmp > 65535)
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <houseSystem+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <houseSystem+0xe2>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a 8b       	std	Y+18, r25	; 0x12
    212a:	89 8b       	std	Y+17, r24	; 0x11
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <houseSystem+0xd0>
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <houseSystem+0xc4>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <houseSystem+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	98 8b       	std	Y+16, r25	; 0x10
    2166:	8f 87       	std	Y+15, r24	; 0x0f
    2168:	8f 85       	ldd	r24, Y+15	; 0x0f
    216a:	98 89       	ldd	r25, Y+16	; 0x10
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <houseSystem+0x10c>
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	do
	{
		enteredUser = KPD_VoidGetPressedKey();
    2174:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <KPD_VoidGetPressedKey>
    2178:	80 93 a8 02 	sts	0x02A8, r24
	} while (enteredUser == KPD_NOT_Pressed); // Ignore KPD_NOT_Pressed
    217c:	80 91 a8 02 	lds	r24, 0x02A8
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	c1 f3       	breq	.-16     	; 0x2174 <houseSystem+0x114>


	switch (enteredUser)
    2184:	80 91 a8 02 	lds	r24, 0x02A8
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3e 8f       	std	Y+30, r19	; 0x1e
    218e:	2d 8f       	std	Y+29, r18	; 0x1d
    2190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2192:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2194:	82 33       	cpi	r24, 0x32	; 50
    2196:	91 05       	cpc	r25, r1
    2198:	51 f1       	breq	.+84     	; 0x21ee <houseSystem+0x18e>
    219a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    219c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    219e:	23 33       	cpi	r18, 0x33	; 51
    21a0:	31 05       	cpc	r19, r1
    21a2:	34 f4       	brge	.+12     	; 0x21b0 <houseSystem+0x150>
    21a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a8:	81 33       	cpi	r24, 0x31	; 49
    21aa:	91 05       	cpc	r25, r1
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <houseSystem+0x166>
    21ae:	5b c0       	rjmp	.+182    	; 0x2266 <houseSystem+0x206>
    21b0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21b2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    21b4:	23 33       	cpi	r18, 0x33	; 51
    21b6:	31 05       	cpc	r19, r1
    21b8:	71 f1       	breq	.+92     	; 0x2216 <houseSystem+0x1b6>
    21ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21be:	84 33       	cpi	r24, 0x34	; 52
    21c0:	91 05       	cpc	r25, r1
    21c2:	e9 f1       	breq	.+122    	; 0x223e <houseSystem+0x1de>
    21c4:	50 c0       	rjmp	.+160    	; 0x2266 <houseSystem+0x206>
	{
	case '1':
	{
		CLCD_clear();
    21c6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
		CLCD_voidSendString("Hello ITI.");
    21ca:	88 ea       	ldi	r24, 0xA8	; 168
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
		Check = verify_user(users[0].password);
    21d2:	85 eb       	ldi	r24, 0xB5	; 181
    21d4:	92 e0       	ldi	r25, 0x02	; 2
    21d6:	0e 94 c8 11 	call	0x2390	; 0x2390 <verify_user>
    21da:	80 93 a7 02 	sts	0x02A7, r24
		if(Check)
    21de:	80 91 a7 02 	lds	r24, 0x02A7
    21e2:	88 23       	and	r24, r24
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <houseSystem+0x188>
    21e6:	b9 c0       	rjmp	.+370    	; 0x235a <houseSystem+0x2fa>
		{
			Menu();
    21e8:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    21ec:	b6 c0       	rjmp	.+364    	; 0x235a <houseSystem+0x2fa>
		}
		break;
	}
	case '2':
	{
		CLCD_clear();
    21ee:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
		CLCD_voidSendString("Hello Heba.");
    21f2:	83 eb       	ldi	r24, 0xB3	; 179
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
		Check = verify_user(users[1].password);
    21fa:	89 ec       	ldi	r24, 0xC9	; 201
    21fc:	92 e0       	ldi	r25, 0x02	; 2
    21fe:	0e 94 c8 11 	call	0x2390	; 0x2390 <verify_user>
    2202:	80 93 a7 02 	sts	0x02A7, r24
		if(Check)
    2206:	80 91 a7 02 	lds	r24, 0x02A7
    220a:	88 23       	and	r24, r24
    220c:	09 f4       	brne	.+2      	; 0x2210 <houseSystem+0x1b0>
    220e:	a5 c0       	rjmp	.+330    	; 0x235a <houseSystem+0x2fa>
		{
			Menu();
    2210:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2214:	a2 c0       	rjmp	.+324    	; 0x235a <houseSystem+0x2fa>
		}
		break;
	}
	case '3':
	{
		CLCD_clear();
    2216:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
		CLCD_voidSendString("Hello Laila.");
    221a:	8f eb       	ldi	r24, 0xBF	; 191
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
		Check = verify_user(users[2].password);
    2222:	8d ed       	ldi	r24, 0xDD	; 221
    2224:	92 e0       	ldi	r25, 0x02	; 2
    2226:	0e 94 c8 11 	call	0x2390	; 0x2390 <verify_user>
    222a:	80 93 a7 02 	sts	0x02A7, r24
		if(Check)
    222e:	80 91 a7 02 	lds	r24, 0x02A7
    2232:	88 23       	and	r24, r24
    2234:	09 f4       	brne	.+2      	; 0x2238 <houseSystem+0x1d8>
    2236:	91 c0       	rjmp	.+290    	; 0x235a <houseSystem+0x2fa>
		{
			Menu();
    2238:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    223c:	8e c0       	rjmp	.+284    	; 0x235a <houseSystem+0x2fa>
		}
		break;
	}
	case '4':
	{
		CLCD_clear();
    223e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
		CLCD_voidSendString("Hello Omar.");
    2242:	8c ec       	ldi	r24, 0xCC	; 204
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
		Check = verify_user(users[3].password);
    224a:	81 ef       	ldi	r24, 0xF1	; 241
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	0e 94 c8 11 	call	0x2390	; 0x2390 <verify_user>
    2252:	80 93 a7 02 	sts	0x02A7, r24
		if(Check)
    2256:	80 91 a7 02 	lds	r24, 0x02A7
    225a:	88 23       	and	r24, r24
    225c:	09 f4       	brne	.+2      	; 0x2260 <houseSystem+0x200>
    225e:	7d c0       	rjmp	.+250    	; 0x235a <houseSystem+0x2fa>
		{
			Menu();
    2260:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2264:	7a c0       	rjmp	.+244    	; 0x235a <houseSystem+0x2fa>
		}
		break;
	}
	default:
	{
		CLCD_clear();
    2266:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
		CLCD_voidSendString("Invalid Choice");
    226a:	88 ed       	ldi	r24, 0xD8	; 216
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	aa e7       	ldi	r26, 0x7A	; 122
    2278:	b4 e4       	ldi	r27, 0x44	; 68
    227a:	8b 87       	std	Y+11, r24	; 0x0b
    227c:	9c 87       	std	Y+12, r25	; 0x0c
    227e:	ad 87       	std	Y+13, r26	; 0x0d
    2280:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8f 83       	std	Y+7, r24	; 0x07
    229c:	98 87       	std	Y+8, r25	; 0x08
    229e:	a9 87       	std	Y+9, r26	; 0x09
    22a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <houseSystem+0x264>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <houseSystem+0x2e2>
	else if (__tmp > 65535)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <houseSystem+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <houseSystem+0x2c4>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <houseSystem+0x2b2>
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <houseSystem+0x2a6>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <houseSystem+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <houseSystem+0x2ee>
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		houseSystem(); //restart the selection
    2356:	0e 94 30 10 	call	0x2060	; 0x2060 <houseSystem>
		break;
	}

	}
}
    235a:	6e 96       	adiw	r28, 0x1e	; 30
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <House_init>:
void House_init()
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidINIT();
    2374:	0e 94 e5 08 	call	0x11ca	; 0x11ca <CLCD_voidINIT>
	KPD_VoidInit();
    2378:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <KPD_VoidInit>
	LED_voidPinInit();
    237c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <LED_voidPinInit>
	BUZZ_voidInit();
    2380:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <BUZZ_voidInit>
	SERVO_voidInit(SERVO_OC1A_PIN5);
    2384:	85 e0       	ldi	r24, 0x05	; 5
    2386:	0e 94 d7 17 	call	0x2fae	; 0x2fae <SERVO_voidInit>

}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <verify_user>:

u8 verify_user(u8 * SavedPass)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	a2 97       	sbiw	r28, 0x22	; 34
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	99 a3       	std	Y+33, r25	; 0x21
    23a6:	88 a3       	std	Y+32, r24	; 0x20
	// If a PIN has not been entered, ask for the PIN


		CLCD_voidGOTOXY(1, 0);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>
		CLCD_voidSendString("PIN:");
    23b0:	87 ee       	ldi	r24, 0xE7	; 231
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>

		// Read the entered PIN from the user
		for (int i = 0; i < 4; i++)
    23b8:	1f 8e       	std	Y+31, r1	; 0x1f
    23ba:	1e 8e       	std	Y+30, r1	; 0x1e
    23bc:	16 c0       	rjmp	.+44     	; 0x23ea <verify_user+0x5a>
		{
			u8 key = 0;
    23be:	1d 8e       	std	Y+29, r1	; 0x1d

			do
			{
				key = KPD_VoidGetPressedKey();
    23c0:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <KPD_VoidGetPressedKey>
    23c4:	8d 8f       	std	Y+29, r24	; 0x1d
			} while (key == KPD_NOT_Pressed); // Ignore KPD_NOT_Pressed
    23c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ca:	d1 f3       	breq	.-12     	; 0x23c0 <verify_user+0x30>

			enteredPin[i] = key;
    23cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23d0:	fc 01       	movw	r30, r24
    23d2:	ed 58       	subi	r30, 0x8D	; 141
    23d4:	fc 4f       	sbci	r31, 0xFC	; 252
    23d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d8:	80 83       	st	Z, r24
			CLCD_voidSendData('*'); // Display an asterisk for each entered digit
    23da:	8a e2       	ldi	r24, 0x2A	; 42
    23dc:	0e 94 47 08 	call	0x108e	; 0x108e <CLCD_voidSendData>

		CLCD_voidGOTOXY(1, 0);
		CLCD_voidSendString("PIN:");

		// Read the entered PIN from the user
		for (int i = 0; i < 4; i++)
    23e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	9f 8f       	std	Y+31, r25	; 0x1f
    23e8:	8e 8f       	std	Y+30, r24	; 0x1e
    23ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ee:	84 30       	cpi	r24, 0x04	; 4
    23f0:	91 05       	cpc	r25, r1
    23f2:	2c f3       	brlt	.-54     	; 0x23be <verify_user+0x2e>

			enteredPin[i] = key;
			CLCD_voidSendData('*'); // Display an asterisk for each entered digit
		}

		enteredPin[4] = '\0'; // Null-terminate the string
    23f4:	10 92 77 03 	sts	0x0377, r1

		// Set the flag to indicate that a PIN has been entered
		pinEntered = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	80 93 a2 02 	sts	0x02A2, r24


	// Compare the entered PIN with the correct PIN
	if (strcmp(enteredPin, SavedPass) == 0 ) //|| pinCorrect == 1
    23fe:	83 e7       	ldi	r24, 0x73	; 115
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	28 a1       	ldd	r18, Y+32	; 0x20
    2404:	39 a1       	ldd	r19, Y+33	; 0x21
    2406:	b9 01       	movw	r22, r18
    2408:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <strcmp>
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	49 f4       	brne	.+18     	; 0x2422 <verify_user+0x92>
	{
		pinCorrect = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 93 a3 02 	sts	0x02A3, r24
		LED_voidPinTurnOn(LedOfBuzzer_PIN); // logged in status
    2416:	85 e0       	ldi	r24, 0x05	; 5
    2418:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LED_voidPinTurnOn>
		return 1;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	8a a3       	std	Y+34, r24	; 0x22
    2420:	10 c1       	rjmp	.+544    	; 0x2642 <verify_user+0x2b2>
	}
	else
	{

		if (failed_count == Max_Trials)
    2422:	80 91 a6 02 	lds	r24, 0x02A6
    2426:	83 30       	cpi	r24, 0x03	; 3
    2428:	09 f0       	breq	.+2      	; 0x242c <verify_user+0x9c>
    242a:	89 c0       	rjmp	.+274    	; 0x253e <verify_user+0x1ae>
		{
			// Invalid PIN, display error message and reset the flag
			CLCD_clear();
    242c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
			CLCD_voidSendString("You have been");
    2430:	8c ee       	ldi	r24, 0xEC	; 236
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
			CLCD_voidGOTOXY(1, 0);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>
			CLCD_voidSendString("blocked for 10s");
    2440:	8a ef       	ldi	r24, 0xFA	; 250
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e4       	ldi	r25, 0x40	; 64
    244c:	ac e1       	ldi	r26, 0x1C	; 28
    244e:	b6 e4       	ldi	r27, 0x46	; 70
    2450:	89 8f       	std	Y+25, r24	; 0x19
    2452:	9a 8f       	std	Y+26, r25	; 0x1a
    2454:	ab 8f       	std	Y+27, r26	; 0x1b
    2456:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	69 8d       	ldd	r22, Y+25	; 0x19
    245a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    245c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    245e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8d 8b       	std	Y+21, r24	; 0x15
    2472:	9e 8b       	std	Y+22, r25	; 0x16
    2474:	af 8b       	std	Y+23, r26	; 0x17
    2476:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2478:	6d 89       	ldd	r22, Y+21	; 0x15
    247a:	7e 89       	ldd	r23, Y+22	; 0x16
    247c:	8f 89       	ldd	r24, Y+23	; 0x17
    247e:	98 8d       	ldd	r25, Y+24	; 0x18
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <verify_user+0x10a>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c 8b       	std	Y+20, r25	; 0x14
    2496:	8b 8b       	std	Y+19, r24	; 0x13
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <verify_user+0x188>
	else if (__tmp > 65535)
    249a:	6d 89       	ldd	r22, Y+21	; 0x15
    249c:	7e 89       	ldd	r23, Y+22	; 0x16
    249e:	8f 89       	ldd	r24, Y+23	; 0x17
    24a0:	98 8d       	ldd	r25, Y+24	; 0x18
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <verify_user+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	69 8d       	ldd	r22, Y+25	; 0x19
    24b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9c 8b       	std	Y+20, r25	; 0x14
    24d8:	8b 8b       	std	Y+19, r24	; 0x13
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <verify_user+0x16a>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9a 8b       	std	Y+18, r25	; 0x12
    24e2:	89 8b       	std	Y+17, r24	; 0x11
    24e4:	89 89       	ldd	r24, Y+17	; 0x11
    24e6:	9a 89       	ldd	r25, Y+18	; 0x12
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <verify_user+0x158>
    24ec:	9a 8b       	std	Y+18, r25	; 0x12
    24ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8b 89       	ldd	r24, Y+19	; 0x13
    24f2:	9c 89       	ldd	r25, Y+20	; 0x14
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8b 89       	ldd	r24, Y+19	; 0x13
    24fc:	9c 89       	ldd	r25, Y+20	; 0x14
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <verify_user+0x14c>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <verify_user+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6d 89       	ldd	r22, Y+21	; 0x15
    2506:	7e 89       	ldd	r23, Y+22	; 0x16
    2508:	8f 89       	ldd	r24, Y+23	; 0x17
    250a:	98 8d       	ldd	r25, Y+24	; 0x18
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	8b 89       	ldd	r24, Y+19	; 0x13
    251a:	9c 89       	ldd	r25, Y+20	; 0x14
    251c:	98 8b       	std	Y+16, r25	; 0x10
    251e:	8f 87       	std	Y+15, r24	; 0x0f
    2520:	8f 85       	ldd	r24, Y+15	; 0x0f
    2522:	98 89       	ldd	r25, Y+16	; 0x10
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <verify_user+0x194>
    2528:	98 8b       	std	Y+16, r25	; 0x10
    252a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10000);
			BUZZ_voidBeep();
    252c:	0e 94 20 07 	call	0xe40	; 0xe40 <BUZZ_voidBeep>
			pinEntered = 0;
    2530:	10 92 a2 02 	sts	0x02A2, r1
			failed_count = 0;
    2534:	10 92 a6 02 	sts	0x02A6, r1
			houseSystem();
    2538:	0e 94 30 10 	call	0x2060	; 0x2060 <houseSystem>
    253c:	81 c0       	rjmp	.+258    	; 0x2640 <verify_user+0x2b0>
		}
		else
		{
			// Invalid PIN, display error message and reset the flag
			CLCD_clear();
    253e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
			CLCD_voidSendString("Invalid PIN");
    2542:	8a e0       	ldi	r24, 0x0A	; 10
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	aa ef       	ldi	r26, 0xFA	; 250
    2550:	b3 e4       	ldi	r27, 0x43	; 67
    2552:	8b 87       	std	Y+11, r24	; 0x0b
    2554:	9c 87       	std	Y+12, r25	; 0x0c
    2556:	ad 87       	std	Y+13, r26	; 0x0d
    2558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	6b 85       	ldd	r22, Y+11	; 0x0b
    255c:	7c 85       	ldd	r23, Y+12	; 0x0c
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	9e 85       	ldd	r25, Y+14	; 0x0e
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4a ef       	ldi	r20, 0xFA	; 250
    2568:	54 e4       	ldi	r21, 0x44	; 68
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8f 83       	std	Y+7, r24	; 0x07
    2574:	98 87       	std	Y+8, r25	; 0x08
    2576:	a9 87       	std	Y+9, r26	; 0x09
    2578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <verify_user+0x20c>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	3f c0       	rjmp	.+126    	; 0x261a <verify_user+0x28a>
	else if (__tmp > 65535)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <verify_user+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <verify_user+0x26c>
    25de:	88 ec       	ldi	r24, 0xC8	; 200
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	8b 83       	std	Y+3, r24	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <verify_user+0x25a>
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	69 f7       	brne	.-38     	; 0x25de <verify_user+0x24e>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <verify_user+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <verify_user+0x296>
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			pinEntered = 0;
    262e:	10 92 a2 02 	sts	0x02A2, r1
			failed_count++;
    2632:	80 91 a6 02 	lds	r24, 0x02A6
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	80 93 a6 02 	sts	0x02A6, r24
			houseSystem();
    263c:	0e 94 30 10 	call	0x2060	; 0x2060 <houseSystem>
		}
		return 0;
    2640:	1a a2       	std	Y+34, r1	; 0x22
    2642:	8a a1       	ldd	r24, Y+34	; 0x22
	}
	}
    2644:	a2 96       	adiw	r28, 0x22	; 34
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <Menu>:


void Menu(void)
{
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	c9 54       	subi	r28, 0x49	; 73
    2664:	d0 40       	sbci	r29, 0x00	; 0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
	u8 selectedOption = 0;
    2670:	fe 01       	movw	r30, r28
    2672:	e9 5b       	subi	r30, 0xB9	; 185
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	10 82       	st	Z, r1

	CLCD_clear();
    2678:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
	CLCD_voidSendString("1-Lock. 2-Light");
    267c:	86 e1       	ldi	r24, 0x16	; 22
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
	CLCD_voidGOTOXY(1,0);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CLCD_voidGOTOXY>
	CLCD_voidSendString("3-user menu");
    268c:	86 e2       	ldi	r24, 0x26	; 38
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>

	while (1)
	{
		do
		{
			selectedOption = KPD_VoidGetPressedKey();
    2694:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <KPD_VoidGetPressedKey>
    2698:	fe 01       	movw	r30, r28
    269a:	e9 5b       	subi	r30, 0xB9	; 185
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 83       	st	Z, r24
		} while (selectedOption == KPD_NOT_Pressed);
    26a0:	fe 01       	movw	r30, r28
    26a2:	e9 5b       	subi	r30, 0xB9	; 185
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 3f       	cpi	r24, 0xFF	; 255
    26aa:	a1 f3       	breq	.-24     	; 0x2694 <Menu+0x3e>

		// Perform the corresponding action
		switch (selectedOption)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e9 5b       	subi	r30, 0xB9	; 185
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	2a 96       	adiw	r28, 0x0a	; 10
    26ba:	3f af       	std	Y+63, r19	; 0x3f
    26bc:	2e af       	std	Y+62, r18	; 0x3e
    26be:	2a 97       	sbiw	r28, 0x0a	; 10
    26c0:	2a 96       	adiw	r28, 0x0a	; 10
    26c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    26c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    26c6:	2a 97       	sbiw	r28, 0x0a	; 10
    26c8:	82 33       	cpi	r24, 0x32	; 50
    26ca:	91 05       	cpc	r25, r1
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <Menu+0x7a>
    26ce:	2f c1       	rjmp	.+606    	; 0x292e <Menu+0x2d8>
    26d0:	2a 96       	adiw	r28, 0x0a	; 10
    26d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    26d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    26d6:	2a 97       	sbiw	r28, 0x0a	; 10
    26d8:	e3 33       	cpi	r30, 0x33	; 51
    26da:	f1 05       	cpc	r31, r1
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <Menu+0x8a>
    26de:	2b c2       	rjmp	.+1110   	; 0x2b36 <Menu+0x4e0>
    26e0:	2a 96       	adiw	r28, 0x0a	; 10
    26e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    26e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    26e6:	2a 97       	sbiw	r28, 0x0a	; 10
    26e8:	21 33       	cpi	r18, 0x31	; 49
    26ea:	31 05       	cpc	r19, r1
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <Menu+0x9a>
    26ee:	26 c2       	rjmp	.+1100   	; 0x2b3c <Menu+0x4e6>
		{

		case '1':
			//   toggleDoorLock();
			CLCD_clear();
    26f0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
			if (Door_state == 0) /* Door is closed */
    26f4:	80 91 a4 02 	lds	r24, 0x02A4
    26f8:	88 23       	and	r24, r24
    26fa:	09 f0       	breq	.+2      	; 0x26fe <Menu+0xa8>
    26fc:	96 c0       	rjmp	.+300    	; 0x282a <Menu+0x1d4>
			{
				Door_state = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 a4 02 	sts	0x02A4, r24
				LED_voidPinTurnOn(DoorLed_PIN);
    2704:	87 e0       	ldi	r24, 0x07	; 7
    2706:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LED_voidPinTurnOn>
				SERVO_voidSetDegreeRotate(SERVO_OC1A_PIN5, 90);
    270a:	85 e0       	ldi	r24, 0x05	; 5
    270c:	6a e5       	ldi	r22, 0x5A	; 90
    270e:	0e 94 04 18 	call	0x3008	; 0x3008 <SERVO_voidSetDegreeRotate>
				CLCD_voidSendString("Door opened. ");
    2712:	82 e3       	ldi	r24, 0x32	; 50
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    271a:	fe 01       	movw	r30, r28
    271c:	ed 5b       	subi	r30, 0xBD	; 189
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	aa ef       	ldi	r26, 0xFA	; 250
    2726:	b3 e4       	ldi	r27, 0x43	; 67
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2730:	8e 01       	movw	r16, r28
    2732:	01 5c       	subi	r16, 0xC1	; 193
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	ed 5b       	subi	r30, 0xBD	; 189
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275e:	fe 01       	movw	r30, r28
    2760:	ff 96       	adiw	r30, 0x3f	; 63
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <Menu+0x12e>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9e af       	std	Y+62, r25	; 0x3e
    2780:	8d af       	std	Y+61, r24	; 0x3d
    2782:	46 c0       	rjmp	.+140    	; 0x2810 <Menu+0x1ba>
	else if (__tmp > 65535)
    2784:	fe 01       	movw	r30, r28
    2786:	ff 96       	adiw	r30, 0x3f	; 63
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	64 f5       	brge	.+88     	; 0x27f8 <Menu+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	fe 01       	movw	r30, r28
    27a2:	ed 5b       	subi	r30, 0xBD	; 189
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9e af       	std	Y+62, r25	; 0x3e
    27cc:	8d af       	std	Y+61, r24	; 0x3d
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <Menu+0x198>
    27d0:	88 ec       	ldi	r24, 0xC8	; 200
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c af       	std	Y+60, r25	; 0x3c
    27d6:	8b af       	std	Y+59, r24	; 0x3b
    27d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    27da:	9c ad       	ldd	r25, Y+60	; 0x3c
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <Menu+0x186>
    27e0:	9c af       	std	Y+60, r25	; 0x3c
    27e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    27e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9e af       	std	Y+62, r25	; 0x3e
    27ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    27f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <Menu+0x17a>
    27f6:	16 c0       	rjmp	.+44     	; 0x2824 <Menu+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	fe 01       	movw	r30, r28
    27fa:	ff 96       	adiw	r30, 0x3f	; 63
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e af       	std	Y+62, r25	; 0x3e
    280e:	8d af       	std	Y+61, r24	; 0x3d
    2810:	8d ad       	ldd	r24, Y+61	; 0x3d
    2812:	9e ad       	ldd	r25, Y+62	; 0x3e
    2814:	9a af       	std	Y+58, r25	; 0x3a
    2816:	89 af       	std	Y+57, r24	; 0x39
    2818:	89 ad       	ldd	r24, Y+57	; 0x39
    281a:	9a ad       	ldd	r25, Y+58	; 0x3a
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <Menu+0x1c6>
    2820:	9a af       	std	Y+58, r25	; 0x3a
    2822:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				Menu();
    2824:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2828:	35 cf       	rjmp	.-406    	; 0x2694 <Menu+0x3e>
			}
			else
			{
				Door_state = 0;
    282a:	10 92 a4 02 	sts	0x02A4, r1
				LED_voidPinTurnOff(DoorLed_PIN);
    282e:	87 e0       	ldi	r24, 0x07	; 7
    2830:	0e 94 00 17 	call	0x2e00	; 0x2e00 <LED_voidPinTurnOff>
				SERVO_voidSetDegreeRotate(SERVO_OC1A_PIN5, -90);
    2834:	85 e0       	ldi	r24, 0x05	; 5
    2836:	66 ea       	ldi	r22, 0xA6	; 166
    2838:	0e 94 04 18 	call	0x3008	; 0x3008 <SERVO_voidSetDegreeRotate>
				CLCD_voidSendString("Door closed. ");
    283c:	80 e4       	ldi	r24, 0x40	; 64
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	aa ef       	ldi	r26, 0xFA	; 250
    284a:	b3 e4       	ldi	r27, 0x43	; 67
    284c:	8d ab       	std	Y+53, r24	; 0x35
    284e:	9e ab       	std	Y+54, r25	; 0x36
    2850:	af ab       	std	Y+55, r26	; 0x37
    2852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	6d a9       	ldd	r22, Y+53	; 0x35
    2856:	7e a9       	ldd	r23, Y+54	; 0x36
    2858:	8f a9       	ldd	r24, Y+55	; 0x37
    285a:	98 ad       	ldd	r25, Y+56	; 0x38
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	89 ab       	std	Y+49, r24	; 0x31
    286e:	9a ab       	std	Y+50, r25	; 0x32
    2870:	ab ab       	std	Y+51, r26	; 0x33
    2872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2874:	69 a9       	ldd	r22, Y+49	; 0x31
    2876:	7a a9       	ldd	r23, Y+50	; 0x32
    2878:	8b a9       	ldd	r24, Y+51	; 0x33
    287a:	9c a9       	ldd	r25, Y+52	; 0x34
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <Menu+0x240>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <Menu+0x2be>
	else if (__tmp > 65535)
    2896:	69 a9       	ldd	r22, Y+49	; 0x31
    2898:	7a a9       	ldd	r23, Y+50	; 0x32
    289a:	8b a9       	ldd	r24, Y+51	; 0x33
    289c:	9c a9       	ldd	r25, Y+52	; 0x34
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <Menu+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	6d a9       	ldd	r22, Y+53	; 0x35
    28b0:	7e a9       	ldd	r23, Y+54	; 0x36
    28b2:	8f a9       	ldd	r24, Y+55	; 0x37
    28b4:	98 ad       	ldd	r25, Y+56	; 0x38
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	98 ab       	std	Y+48, r25	; 0x30
    28d4:	8f a7       	std	Y+47, r24	; 0x2f
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <Menu+0x2a0>
    28d8:	88 ec       	ldi	r24, 0xC8	; 200
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e a7       	std	Y+46, r25	; 0x2e
    28de:	8d a7       	std	Y+45, r24	; 0x2d
    28e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <Menu+0x28e>
    28e8:	9e a7       	std	Y+46, r25	; 0x2e
    28ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ee:	98 a9       	ldd	r25, Y+48	; 0x30
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	98 ab       	std	Y+48, r25	; 0x30
    28f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f8:	98 a9       	ldd	r25, Y+48	; 0x30
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <Menu+0x282>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <Menu+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	69 a9       	ldd	r22, Y+49	; 0x31
    2902:	7a a9       	ldd	r23, Y+50	; 0x32
    2904:	8b a9       	ldd	r24, Y+51	; 0x33
    2906:	9c a9       	ldd	r25, Y+52	; 0x34
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	98 ab       	std	Y+48, r25	; 0x30
    2912:	8f a7       	std	Y+47, r24	; 0x2f
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	98 a9       	ldd	r25, Y+48	; 0x30
    2918:	9c a7       	std	Y+44, r25	; 0x2c
    291a:	8b a7       	std	Y+43, r24	; 0x2b
    291c:	8b a5       	ldd	r24, Y+43	; 0x2b
    291e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <Menu+0x2ca>
    2924:	9c a7       	std	Y+44, r25	; 0x2c
    2926:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				Menu();
    2928:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    292c:	b3 ce       	rjmp	.-666    	; 0x2694 <Menu+0x3e>
			break;

		case '2':
			//  toggleRoomLights();

			CLCD_clear();
    292e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>

			if (light_state == 0)
    2932:	80 91 a5 02 	lds	r24, 0x02A5
    2936:	88 23       	and	r24, r24
    2938:	09 f0       	breq	.+2      	; 0x293c <Menu+0x2e6>
    293a:	7f c0       	rjmp	.+254    	; 0x2a3a <Menu+0x3e4>
			{
				light_state = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 a5 02 	sts	0x02A5, r24
				LED_voidPinTurnOn(HomeLed_PIN);
    2942:	86 e0       	ldi	r24, 0x06	; 6
    2944:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LED_voidPinTurnOn>
				CLCD_voidSendString("Lights ON.");
    2948:	8e e4       	ldi	r24, 0x4E	; 78
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	aa ef       	ldi	r26, 0xFA	; 250
    2956:	b3 e4       	ldi	r27, 0x43	; 67
    2958:	8f a3       	std	Y+39, r24	; 0x27
    295a:	98 a7       	std	Y+40, r25	; 0x28
    295c:	a9 a7       	std	Y+41, r26	; 0x29
    295e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6f a1       	ldd	r22, Y+39	; 0x27
    2962:	78 a5       	ldd	r23, Y+40	; 0x28
    2964:	89 a5       	ldd	r24, Y+41	; 0x29
    2966:	9a a5       	ldd	r25, Y+42	; 0x2a
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8b a3       	std	Y+35, r24	; 0x23
    297a:	9c a3       	std	Y+36, r25	; 0x24
    297c:	ad a3       	std	Y+37, r26	; 0x25
    297e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2980:	6b a1       	ldd	r22, Y+35	; 0x23
    2982:	7c a1       	ldd	r23, Y+36	; 0x24
    2984:	8d a1       	ldd	r24, Y+37	; 0x25
    2986:	9e a1       	ldd	r25, Y+38	; 0x26
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <Menu+0x34c>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9a a3       	std	Y+34, r25	; 0x22
    299e:	89 a3       	std	Y+33, r24	; 0x21
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <Menu+0x3ca>
	else if (__tmp > 65535)
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <Menu+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6f a1       	ldd	r22, Y+39	; 0x27
    29bc:	78 a5       	ldd	r23, Y+40	; 0x28
    29be:	89 a5       	ldd	r24, Y+41	; 0x29
    29c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9a a3       	std	Y+34, r25	; 0x22
    29e0:	89 a3       	std	Y+33, r24	; 0x21
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <Menu+0x3ac>
    29e4:	88 ec       	ldi	r24, 0xC8	; 200
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	98 a3       	std	Y+32, r25	; 0x20
    29ea:	8f 8f       	std	Y+31, r24	; 0x1f
    29ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ee:	98 a1       	ldd	r25, Y+32	; 0x20
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <Menu+0x39a>
    29f4:	98 a3       	std	Y+32, r25	; 0x20
    29f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	89 a1       	ldd	r24, Y+33	; 0x21
    29fa:	9a a1       	ldd	r25, Y+34	; 0x22
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9a a3       	std	Y+34, r25	; 0x22
    2a00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	89 a1       	ldd	r24, Y+33	; 0x21
    2a04:	9a a1       	ldd	r25, Y+34	; 0x22
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <Menu+0x38e>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <Menu+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a10:	8d a1       	ldd	r24, Y+37	; 0x25
    2a12:	9e a1       	ldd	r25, Y+38	; 0x26
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9a a3       	std	Y+34, r25	; 0x22
    2a1e:	89 a3       	std	Y+33, r24	; 0x21
    2a20:	89 a1       	ldd	r24, Y+33	; 0x21
    2a22:	9a a1       	ldd	r25, Y+34	; 0x22
    2a24:	9e 8f       	std	Y+30, r25	; 0x1e
    2a26:	8d 8f       	std	Y+29, r24	; 0x1d
    2a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <Menu+0x3d6>
    2a30:	9e 8f       	std	Y+30, r25	; 0x1e
    2a32:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				Menu();
    2a34:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2a38:	2d ce       	rjmp	.-934    	; 0x2694 <Menu+0x3e>
			}
			else
			{
				light_state = 0;
    2a3a:	10 92 a5 02 	sts	0x02A5, r1
				LED_voidPinTurnOff(HomeLed_PIN);
    2a3e:	86 e0       	ldi	r24, 0x06	; 6
    2a40:	0e 94 00 17 	call	0x2e00	; 0x2e00 <LED_voidPinTurnOff>
				CLCD_voidSendString("Lights OFF.");
    2a44:	89 e5       	ldi	r24, 0x59	; 89
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	aa ef       	ldi	r26, 0xFA	; 250
    2a52:	b3 e4       	ldi	r27, 0x43	; 67
    2a54:	89 8f       	std	Y+25, r24	; 0x19
    2a56:	9a 8f       	std	Y+26, r25	; 0x1a
    2a58:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a ef       	ldi	r20, 0xFA	; 250
    2a6a:	54 e4       	ldi	r21, 0x44	; 68
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8d 8b       	std	Y+21, r24	; 0x15
    2a76:	9e 8b       	std	Y+22, r25	; 0x16
    2a78:	af 8b       	std	Y+23, r26	; 0x17
    2a7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	2c f4       	brge	.+10     	; 0x2a9e <Menu+0x448>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 8b       	std	Y+20, r25	; 0x14
    2a9a:	8b 8b       	std	Y+19, r24	; 0x13
    2a9c:	3f c0       	rjmp	.+126    	; 0x2b1c <Menu+0x4c6>
	else if (__tmp > 65535)
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	4f e7       	ldi	r20, 0x7F	; 127
    2aac:	57 e4       	ldi	r21, 0x47	; 71
    2aae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	4c f5       	brge	.+82     	; 0x2b08 <Menu+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <Menu+0x4a8>
    2ae0:	88 ec       	ldi	r24, 0xC8	; 200
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9a 8b       	std	Y+18, r25	; 0x12
    2ae6:	89 8b       	std	Y+17, r24	; 0x11
    2ae8:	89 89       	ldd	r24, Y+17	; 0x11
    2aea:	9a 89       	ldd	r25, Y+18	; 0x12
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <Menu+0x496>
    2af0:	9a 8b       	std	Y+18, r25	; 0x12
    2af2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	69 f7       	brne	.-38     	; 0x2ae0 <Menu+0x48a>
    2b06:	14 c0       	rjmp	.+40     	; 0x2b30 <Menu+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b08:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	98 8b       	std	Y+16, r25	; 0x10
    2b22:	8f 87       	std	Y+15, r24	; 0x0f
    2b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b26:	98 89       	ldd	r25, Y+16	; 0x10
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <Menu+0x4d2>
    2b2c:	98 8b       	std	Y+16, r25	; 0x10
    2b2e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				Menu();
    2b30:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2b34:	af cd       	rjmp	.-1186   	; 0x2694 <Menu+0x3e>
			}
			break;
		case '3':
			houseSystem();
    2b36:	0e 94 30 10 	call	0x2060	; 0x2060 <houseSystem>
    2b3a:	ac cd       	rjmp	.-1192   	; 0x2694 <Menu+0x3e>
			break;

		default:
		{
			CLCD_clear();
    2b3c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
			CLCD_voidSendString("Invalid option");
    2b40:	85 e6       	ldi	r24, 0x65	; 101
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	aa ef       	ldi	r26, 0xFA	; 250
    2b4e:	b3 e4       	ldi	r27, 0x43	; 67
    2b50:	8b 87       	std	Y+11, r24	; 0x0b
    2b52:	9c 87       	std	Y+12, r25	; 0x0c
    2b54:	ad 87       	std	Y+13, r26	; 0x0d
    2b56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8f 83       	std	Y+7, r24	; 0x07
    2b72:	98 87       	std	Y+8, r25	; 0x08
    2b74:	a9 87       	std	Y+9, r26	; 0x09
    2b76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b78:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7a:	78 85       	ldd	r23, Y+8	; 0x08
    2b7c:	89 85       	ldd	r24, Y+9	; 0x09
    2b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <Menu+0x544>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <Menu+0x5c2>
	else if (__tmp > 65535)
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <Menu+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <Menu+0x5a4>
    2bdc:	88 ec       	ldi	r24, 0xC8	; 200
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8b 83       	std	Y+3, r24	; 0x03
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <Menu+0x592>
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <Menu+0x586>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <Menu+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <Menu+0x5ce>
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			CLCD_clear();
    2c2c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>
			Menu();
    2c30:	0e 94 2b 13 	call	0x2656	; 0x2656 <Menu>
    2c34:	2f cd       	rjmp	.-1442   	; 0x2694 <Menu+0x3e>

00002c36 <KPD_VoidInit>:
#include "Keypad_interface.h"
#include "Keypad_config.h"


void KPD_VoidInit()
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    // Set the pin directions for the columns as output
    DIO_SetPin_Direction(KPD_PORT, KPD_Column0, PIN_OUTPUT);
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	41 e0       	ldi	r20, 0x01	; 1
    2c44:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Column1, PIN_OUTPUT);
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Column2, PIN_OUTPUT);
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	62 e0       	ldi	r22, 0x02	; 2
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Column3, PIN_OUTPUT);
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	63 e0       	ldi	r22, 0x03	; 3
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>

    // Set the pin directions for the rows as input
    DIO_SetPin_Direction(KPD_PORT, KPD_Row0, PIN_INPUT);
    2c66:	82 e0       	ldi	r24, 0x02	; 2
    2c68:	64 e0       	ldi	r22, 0x04	; 4
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Row1, PIN_INPUT);
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	65 e0       	ldi	r22, 0x05	; 5
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Row2, PIN_INPUT);
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	66 e0       	ldi	r22, 0x06	; 6
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    DIO_SetPin_Direction(KPD_PORT, KPD_Row3, PIN_INPUT);
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	67 e0       	ldi	r22, 0x07	; 7
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>

    // Set the initial value of the port to all high
    DIO_SetPort_value(KPD_PORT, PORT_HIGH);
    2c8e:	82 e0       	ldi	r24, 0x02	; 2
    2c90:	6f ef       	ldi	r22, 0xFF	; 255
    2c92:	0e 94 86 0c 	call	0x190c	; 0x190c <DIO_SetPort_value>
}
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <KPD_VoidGetPressedKey>:

u8 KPD_VoidGetPressedKey()
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <KPD_VoidGetPressedKey+0x6>
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <KPD_VoidGetPressedKey+0x8>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    u8 Key_Pressed_Value = KPD_NOT_Pressed; // if the value has not been changed from KPD_NOT_Pressed, then no key is pressed
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	8b 83       	std	Y+3, r24	; 0x03

    static u8 Column_arr[] = {KPD_Column0, KPD_Column1, KPD_Column2, KPD_Column3};
    static u8 Row_arr[] = {KPD_Row0, KPD_Row1, KPD_Row2, KPD_Row3};
    static u8 Local_Keypad_arr[KPD_Row_Number][KPD_Column_Number] = KPD_Arr;

    for (u8 Column = 0; Column < KPD_Column_Number; Column++)
    2cae:	1a 82       	std	Y+2, r1	; 0x02
    2cb0:	5e c0       	rjmp	.+188    	; 0x2d6e <KPD_VoidGetPressedKey+0xd2>
    {
        // Set the current column pin to low
        DIO_SetPinValue(KPD_PORT, Column_arr[Column], PIN_LOW);
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e3 56       	subi	r30, 0x63	; 99
    2cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cbe:	90 81       	ld	r25, Z
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	69 2f       	mov	r22, r25
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

        for (u8 Row = 0; Row < KPD_Row_Number; Row++)
    2cca:	19 82       	std	Y+1, r1	; 0x01
    2ccc:	3d c0       	rjmp	.+122    	; 0x2d48 <KPD_VoidGetPressedKey+0xac>
        {
            // Get the state of the current row pin
            DIO_VoidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	e7 56       	subi	r30, 0x67	; 103
    2cd8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cda:	90 81       	ld	r25, Z
    2cdc:	9e 01       	movw	r18, r28
    2cde:	2c 5f       	subi	r18, 0xFC	; 252
    2ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	69 2f       	mov	r22, r25
    2ce6:	a9 01       	movw	r20, r18
    2ce8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <DIO_VoidGetPinValue>

            if (Key_Pressed_State == PIN_LOW) // when a key is pressed it has a low value
    2cec:	8c 81       	ldd	r24, Y+4	; 0x04
    2cee:	88 23       	and	r24, r24
    2cf0:	41 f5       	brne	.+80     	; 0x2d42 <KPD_VoidGetPressedKey+0xa6>
            {
                Key_Pressed_Value = Local_Keypad_arr[Row][Column];
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	48 2f       	mov	r20, r24
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	ca 01       	movw	r24, r20
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	82 0f       	add	r24, r18
    2d0a:	93 1f       	adc	r25, r19
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	e7 57       	subi	r30, 0x77	; 119
    2d10:	fd 4f       	sbci	r31, 0xFD	; 253
    2d12:	80 81       	ld	r24, Z
    2d14:	8b 83       	std	Y+3, r24	; 0x03
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <KPD_VoidGetPressedKey+0x9a>

                // Wait until the key is released
                while (Key_Pressed_State == PIN_LOW) // polling, while the key is still pressed, don't do anything.
                {
                    DIO_VoidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e7 56       	subi	r30, 0x67	; 103
    2d22:	fd 4f       	sbci	r31, 0xFD	; 253
    2d24:	90 81       	ld	r25, Z
    2d26:	9e 01       	movw	r18, r28
    2d28:	2c 5f       	subi	r18, 0xFC	; 252
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	69 2f       	mov	r22, r25
    2d30:	a9 01       	movw	r20, r18
    2d32:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <DIO_VoidGetPinValue>
            if (Key_Pressed_State == PIN_LOW) // when a key is pressed it has a low value
            {
                Key_Pressed_Value = Local_Keypad_arr[Row][Column];

                // Wait until the key is released
                while (Key_Pressed_State == PIN_LOW) // polling, while the key is still pressed, don't do anything.
    2d36:	8c 81       	ldd	r24, Y+4	; 0x04
    2d38:	88 23       	and	r24, r24
    2d3a:	71 f3       	breq	.-36     	; 0x2d18 <KPD_VoidGetPressedKey+0x7c>
                {
                    DIO_VoidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
                }
                return Key_Pressed_Value;
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	1c c0       	rjmp	.+56     	; 0x2d7a <KPD_VoidGetPressedKey+0xde>
    for (u8 Column = 0; Column < KPD_Column_Number; Column++)
    {
        // Set the current column pin to low
        DIO_SetPinValue(KPD_PORT, Column_arr[Column], PIN_LOW);

        for (u8 Row = 0; Row < KPD_Row_Number; Row++)
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	84 30       	cpi	r24, 0x04	; 4
    2d4c:	08 f4       	brcc	.+2      	; 0x2d50 <KPD_VoidGetPressedKey+0xb4>
    2d4e:	bf cf       	rjmp	.-130    	; 0x2cce <KPD_VoidGetPressedKey+0x32>
                }
                return Key_Pressed_Value;
            }
        }
        // Set the current column pin back to high
        DIO_SetPinValue(KPD_PORT, Column_arr[Column], PIN_HIGH);
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	fc 01       	movw	r30, r24
    2d58:	e3 56       	subi	r30, 0x63	; 99
    2d5a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d5c:	90 81       	ld	r25, Z
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	69 2f       	mov	r22, r25
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>

    static u8 Column_arr[] = {KPD_Column0, KPD_Column1, KPD_Column2, KPD_Column3};
    static u8 Row_arr[] = {KPD_Row0, KPD_Row1, KPD_Row2, KPD_Row3};
    static u8 Local_Keypad_arr[KPD_Row_Number][KPD_Column_Number] = KPD_Arr;

    for (u8 Column = 0; Column < KPD_Column_Number; Column++)
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	8f 5f       	subi	r24, 0xFF	; 255
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	84 30       	cpi	r24, 0x04	; 4
    2d72:	08 f4       	brcc	.+2      	; 0x2d76 <KPD_VoidGetPressedKey+0xda>
    2d74:	9e cf       	rjmp	.-196    	; 0x2cb2 <KPD_VoidGetPressedKey+0x16>
        }
        // Set the current column pin back to high
        DIO_SetPinValue(KPD_PORT, Column_arr[Column], PIN_HIGH);
    }

    return Key_Pressed_Value;
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <LED_voidPinInit>:

/*****************************************************************/
/******************* Public Function for Pin LED *****************/
/*****************************************************************/

void LED_voidPinInit(void) {
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Direction(LedOfBuzzer_PORT,LedOfBuzzer_PIN,PIN_OUTPUT); // Set LedOfBuzzer pin as output
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	65 e0       	ldi	r22, 0x05	; 5
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(HomeLed_PORT,HomeLed_PIN,PIN_OUTPUT); // Set LedOfHome pin as output
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	66 e0       	ldi	r22, 0x06	; 6
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DoorLed_PORT,DoorLed_PIN,PIN_OUTPUT); // Set LedOfDoor pin as output
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	67 e0       	ldi	r22, 0x07	; 7
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
}
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <LED_voidPinTurnOn>:

void LED_voidPinTurnOn(u8 LedPin) {
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	0f 92       	push	r0
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	89 83       	std	Y+1, r24	; 0x01
	if(LedPin == LedOfBuzzer_PIN)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	85 30       	cpi	r24, 0x05	; 5
    2dc8:	31 f4       	brne	.+12     	; 0x2dd6 <LED_voidPinTurnOn+0x1e>
	{
    	DIO_SetPinValue(LedOfBuzzer_PORT,LedOfBuzzer_PIN,PIN_HIGH); // Turn LedOfBuzzer on
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	65 e0       	ldi	r22, 0x05	; 5
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
    2dd4:	11 c0       	rjmp	.+34     	; 0x2df8 <LED_voidPinTurnOn+0x40>
	}
	else if(LedPin == HomeLed_PIN)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	86 30       	cpi	r24, 0x06	; 6
    2dda:	31 f4       	brne	.+12     	; 0x2de8 <LED_voidPinTurnOn+0x30>
	{
    	DIO_SetPinValue(HomeLed_PORT,HomeLed_PIN,PIN_HIGH); // Turn LedOfHome on
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	66 e0       	ldi	r22, 0x06	; 6
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
    2de6:	08 c0       	rjmp	.+16     	; 0x2df8 <LED_voidPinTurnOn+0x40>
	}
	else if(LedPin == DoorLed_PIN)
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	87 30       	cpi	r24, 0x07	; 7
    2dec:	29 f4       	brne	.+10     	; 0x2df8 <LED_voidPinTurnOn+0x40>
	{
    	DIO_SetPinValue(DoorLed_PORT,DoorLed_PIN,PIN_HIGH); // Turn LedOfDoor on
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	67 e0       	ldi	r22, 0x07	; 7
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
	}
}
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <LED_voidPinTurnOff>:

void LED_voidPinTurnOff(u8 LedPin) {
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	0f 92       	push	r0
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	89 83       	std	Y+1, r24	; 0x01
	if(LedPin == LedOfBuzzer_PIN)
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	85 30       	cpi	r24, 0x05	; 5
    2e10:	31 f4       	brne	.+12     	; 0x2e1e <LED_voidPinTurnOff+0x1e>
	{
    	DIO_SetPinValue(LedOfBuzzer_PORT,LedOfBuzzer_PIN,PIN_LOW); // Turn LedOfBuzzer off
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	65 e0       	ldi	r22, 0x05	; 5
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
    2e1c:	11 c0       	rjmp	.+34     	; 0x2e40 <LED_voidPinTurnOff+0x40>
	}
	else if(LedPin == HomeLed_PIN)
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	86 30       	cpi	r24, 0x06	; 6
    2e22:	31 f4       	brne	.+12     	; 0x2e30 <LED_voidPinTurnOff+0x30>
	{
    	DIO_SetPinValue(HomeLed_PORT,HomeLed_PIN,PIN_LOW); // Turn LedOfHome off
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	66 e0       	ldi	r22, 0x06	; 6
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
    2e2e:	08 c0       	rjmp	.+16     	; 0x2e40 <LED_voidPinTurnOff+0x40>
	}
	else if(LedPin == DoorLed_PIN)
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	87 30       	cpi	r24, 0x07	; 7
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <LED_voidPinTurnOff+0x40>
	{
    	DIO_SetPinValue(DoorLed_PORT,DoorLed_PIN,PIN_LOW); // Turn LedOfDoor off
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	67 e0       	ldi	r22, 0x07	; 7
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPinValue>
	}
}
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <MAPPING_s32GetOutput>:

#include "STD_TYPES.h"
#include "Mapping_interface.h"

s32 MAPPING_s32GetOutput (s32 Copy_s32InputMin ,s32 Copy_s32InputMax ,s32 Copy_s32OutputMin ,s32 Copy_s32OutputMax ,s32 Copy_s32InputValue )
{
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	a4 97       	sbiw	r28, 0x24	; 36
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	6d 8b       	std	Y+21, r22	; 0x15
    2e6e:	7e 8b       	std	Y+22, r23	; 0x16
    2e70:	8f 8b       	std	Y+23, r24	; 0x17
    2e72:	98 8f       	std	Y+24, r25	; 0x18
    2e74:	29 8f       	std	Y+25, r18	; 0x19
    2e76:	3a 8f       	std	Y+26, r19	; 0x1a
    2e78:	4b 8f       	std	Y+27, r20	; 0x1b
    2e7a:	5c 8f       	std	Y+28, r21	; 0x1c
    2e7c:	ed 8e       	std	Y+29, r14	; 0x1d
    2e7e:	fe 8e       	std	Y+30, r15	; 0x1e
    2e80:	0f 8f       	std	Y+31, r16	; 0x1f
    2e82:	18 a3       	std	Y+32, r17	; 0x20
    2e84:	a9 a2       	std	Y+33, r10	; 0x21
    2e86:	ba a2       	std	Y+34, r11	; 0x22
    2e88:	cb a2       	std	Y+35, r12	; 0x23
    2e8a:	dc a2       	std	Y+36, r13	; 0x24
	// Calculate the input range and output range spans
	s32 input_span = Copy_s32InputMax - Copy_s32InputMin;
    2e8c:	29 8d       	ldd	r18, Y+25	; 0x19
    2e8e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2e90:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2e92:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2e94:	8d 89       	ldd	r24, Y+21	; 0x15
    2e96:	9e 89       	ldd	r25, Y+22	; 0x16
    2e98:	af 89       	ldd	r26, Y+23	; 0x17
    2e9a:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e9c:	79 01       	movw	r14, r18
    2e9e:	8a 01       	movw	r16, r20
    2ea0:	e8 1a       	sub	r14, r24
    2ea2:	f9 0a       	sbc	r15, r25
    2ea4:	0a 0b       	sbc	r16, r26
    2ea6:	1b 0b       	sbc	r17, r27
    2ea8:	d8 01       	movw	r26, r16
    2eaa:	c7 01       	movw	r24, r14
    2eac:	89 8b       	std	Y+17, r24	; 0x11
    2eae:	9a 8b       	std	Y+18, r25	; 0x12
    2eb0:	ab 8b       	std	Y+19, r26	; 0x13
    2eb2:	bc 8b       	std	Y+20, r27	; 0x14
	s32 output_span = Copy_s32OutputMax - Copy_s32OutputMin;
    2eb4:	29 a1       	ldd	r18, Y+33	; 0x21
    2eb6:	3a a1       	ldd	r19, Y+34	; 0x22
    2eb8:	4b a1       	ldd	r20, Y+35	; 0x23
    2eba:	5c a1       	ldd	r21, Y+36	; 0x24
    2ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec0:	af 8d       	ldd	r26, Y+31	; 0x1f
    2ec2:	b8 a1       	ldd	r27, Y+32	; 0x20
    2ec4:	79 01       	movw	r14, r18
    2ec6:	8a 01       	movw	r16, r20
    2ec8:	e8 1a       	sub	r14, r24
    2eca:	f9 0a       	sbc	r15, r25
    2ecc:	0a 0b       	sbc	r16, r26
    2ece:	1b 0b       	sbc	r17, r27
    2ed0:	d8 01       	movw	r26, r16
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	8d 87       	std	Y+13, r24	; 0x0d
    2ed6:	9e 87       	std	Y+14, r25	; 0x0e
    2ed8:	af 87       	std	Y+15, r26	; 0x0f
    2eda:	b8 8b       	std	Y+16, r27	; 0x10

	// Calculate the input value's distance from the minimum input value
	s32 input_distance = Copy_s32InputValue - Copy_s32InputMin;
    2edc:	29 a9       	ldd	r18, Y+49	; 0x31
    2ede:	3a a9       	ldd	r19, Y+50	; 0x32
    2ee0:	4b a9       	ldd	r20, Y+51	; 0x33
    2ee2:	5c a9       	ldd	r21, Y+52	; 0x34
    2ee4:	8d 89       	ldd	r24, Y+21	; 0x15
    2ee6:	9e 89       	ldd	r25, Y+22	; 0x16
    2ee8:	af 89       	ldd	r26, Y+23	; 0x17
    2eea:	b8 8d       	ldd	r27, Y+24	; 0x18
    2eec:	79 01       	movw	r14, r18
    2eee:	8a 01       	movw	r16, r20
    2ef0:	e8 1a       	sub	r14, r24
    2ef2:	f9 0a       	sbc	r15, r25
    2ef4:	0a 0b       	sbc	r16, r26
    2ef6:	1b 0b       	sbc	r17, r27
    2ef8:	d8 01       	movw	r26, r16
    2efa:	c7 01       	movw	r24, r14
    2efc:	89 87       	std	Y+9, r24	; 0x09
    2efe:	9a 87       	std	Y+10, r25	; 0x0a
    2f00:	ab 87       	std	Y+11, r26	; 0x0b
    2f02:	bc 87       	std	Y+12, r27	; 0x0c

	// Calculate the proportion of the input range span that the input value represents
	f32 input_proportion = (f32)input_distance / (f32)input_span;
    2f04:	69 85       	ldd	r22, Y+9	; 0x09
    2f06:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f0c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f10:	7b 01       	movw	r14, r22
    2f12:	8c 01       	movw	r16, r24
    2f14:	69 89       	ldd	r22, Y+17	; 0x11
    2f16:	7a 89       	ldd	r23, Y+18	; 0x12
    2f18:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f20:	9b 01       	movw	r18, r22
    2f22:	ac 01       	movw	r20, r24
    2f24:	c8 01       	movw	r24, r16
    2f26:	b7 01       	movw	r22, r14
    2f28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	9e 83       	std	Y+6, r25	; 0x06
    2f34:	af 83       	std	Y+7, r26	; 0x07
    2f36:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the output value by scaling the proportion to the output range span
	s32 output_value = Copy_s32OutputMin + (s32)(input_proportion * output_span);
    2f38:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f3a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3e:	98 89       	ldd	r25, Y+16	; 0x10
    2f40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f4e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f50:	4f 81       	ldd	r20, Y+7	; 0x07
    2f52:	58 85       	ldd	r21, Y+8	; 0x08
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2f64:	9b 01       	movw	r18, r22
    2f66:	ac 01       	movw	r20, r24
    2f68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f6c:	af 8d       	ldd	r26, Y+31	; 0x1f
    2f6e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2f70:	82 0f       	add	r24, r18
    2f72:	93 1f       	adc	r25, r19
    2f74:	a4 1f       	adc	r26, r20
    2f76:	b5 1f       	adc	r27, r21
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	ab 83       	std	Y+3, r26	; 0x03
    2f7e:	bc 83       	std	Y+4, r27	; 0x04

	// Return the mapped output value
	return output_value;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	ab 81       	ldd	r26, Y+3	; 0x03
    2f86:	bc 81       	ldd	r27, Y+4	; 0x04

}
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	a4 96       	adiw	r28, 0x24	; 36
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	ef 90       	pop	r14
    2fa4:	df 90       	pop	r13
    2fa6:	cf 90       	pop	r12
    2fa8:	bf 90       	pop	r11
    2faa:	af 90       	pop	r10
    2fac:	08 95       	ret

00002fae <SERVO_voidInit>:
#include "TIMER_interface.h"
#include "TIMER_config.h"
#include "TIMER_private.h"

void SERVO_voidInit(u8 Copy_u8IDPin)
{
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	0f 92       	push	r0
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	89 83       	std	Y+1, r24	; 0x01
	GIE_voidEnable();
    2fba:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <GIE_voidEnable>

	Timer0_voidInit();
    2fbe:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Timer0_voidInit>
	Timer0_voidInterruptEnable();
    2fc2:	0e 94 aa 1b 	call	0x3754	; 0x3754 <Timer0_voidInterruptEnable>
	Timer0_voidSetPrescalerValue(PRESCALER_init);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	0e 94 b8 1b 	call	0x3770	; 0x3770 <Timer0_voidSetPrescalerValue>


	TIM1_voidInit();
    2fcc:	0e 94 8f 18 	call	0x311e	; 0x311e <TIM1_voidInit>
	TIM1_voidEnable(PRESCALER_init);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	0e 94 25 19 	call	0x324a	; 0x324a <TIM1_voidEnable>
	TIM1_voidSetIcuRegValue(20000);
    2fd6:	80 e2       	ldi	r24, 0x20	; 32
    2fd8:	9e e4       	ldi	r25, 0x4E	; 78
    2fda:	0e 94 4b 1a 	call	0x3496	; 0x3496 <TIM1_voidSetIcuRegValue>


	if (Copy_u8IDPin == SERVO_OC1B_PIN4)
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	84 30       	cpi	r24, 0x04	; 4
    2fe2:	31 f4       	brne	.+12     	; 0x2ff0 <SERVO_voidInit+0x42>
	{
		DIO_SetPin_Direction(SERVO_PORTD, SERVO_OC1B_PIN4, SERVO_OUTPUT);
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	64 e0       	ldi	r22, 0x04	; 4
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
    2fee:	08 c0       	rjmp	.+16     	; 0x3000 <SERVO_voidInit+0x52>
	}

	else if (Copy_u8IDPin == SERVO_OC1A_PIN5)
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	85 30       	cpi	r24, 0x05	; 5
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <SERVO_voidInit+0x52>
	{
		DIO_SetPin_Direction(SERVO_PORTD, SERVO_OC1A_PIN5, SERVO_OUTPUT);
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	65 e0       	ldi	r22, 0x05	; 5
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 c7 0c 	call	0x198e	; 0x198e <DIO_SetPin_Direction>
	}
}
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <SERVO_voidSetDegreeRotate>:



void SERVO_voidSetDegreeRotate(u8 Copy_u8IDPin ,u8 Copy_u8AngleValue)
{
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <SERVO_voidSetDegreeRotate+0x16>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	6a 83       	std	Y+2, r22	; 0x02

	if (Copy_u8IDPin == SERVO_OC1A_PIN5)
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	85 30       	cpi	r24, 0x05	; 5
    302a:	a9 f5       	brne	.+106    	; 0x3096 <SERVO_voidSetDegreeRotate+0x8e>
	{
		TIM1_voidSetCmpARegValue(MAPPING_s32GetOutput(MIN_ANGLE, MAX_ANGLE, MIN_TIME_ON, MAX_TIME_ON, Copy_u8AngleValue));
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a0 e0       	ldi	r26, 0x00	; 0
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	00 d0       	rcall	.+0      	; 0x3038 <SERVO_voidSetDegreeRotate+0x30>
    3038:	00 d0       	rcall	.+0      	; 0x303a <SERVO_voidSetDegreeRotate+0x32>
    303a:	ed b7       	in	r30, 0x3d	; 61
    303c:	fe b7       	in	r31, 0x3e	; 62
    303e:	31 96       	adiw	r30, 0x01	; 1
    3040:	80 83       	st	Z, r24
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	a2 83       	std	Z+2, r26	; 0x02
    3046:	b3 83       	std	Z+3, r27	; 0x03
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	24 eb       	ldi	r18, 0xB4	; 180
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	0f 2e       	mov	r0, r31
    305a:	f6 e2       	ldi	r31, 0x26	; 38
    305c:	ef 2e       	mov	r14, r31
    305e:	f2 e0       	ldi	r31, 0x02	; 2
    3060:	ff 2e       	mov	r15, r31
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	0f 2f       	mov	r16, r31
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	1f 2f       	mov	r17, r31
    306a:	f0 2d       	mov	r31, r0
    306c:	0f 2e       	mov	r0, r31
    306e:	f8 e2       	ldi	r31, 0x28	; 40
    3070:	af 2e       	mov	r10, r31
    3072:	fa e0       	ldi	r31, 0x0A	; 10
    3074:	bf 2e       	mov	r11, r31
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	cf 2e       	mov	r12, r31
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	df 2e       	mov	r13, r31
    307e:	f0 2d       	mov	r31, r0
    3080:	0e 94 24 17 	call	0x2e48	; 0x2e48 <MAPPING_s32GetOutput>
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	0e 94 1d 1a 	call	0x343a	; 0x343a <TIM1_voidSetCmpARegValue>
    3094:	37 c0       	rjmp	.+110    	; 0x3104 <SERVO_voidSetDegreeRotate+0xfc>
	}

	else if (Copy_u8IDPin == SERVO_OC1B_PIN4)
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	84 30       	cpi	r24, 0x04	; 4
    309a:	a1 f5       	brne	.+104    	; 0x3104 <SERVO_voidSetDegreeRotate+0xfc>
	{
		TIM1_voidSetCmpARegValue(MAPPING_s32GetOutput(MIN_ANGLE, MAX_ANGLE, MIN_TIME_ON, MAX_TIME_ON, Copy_u8AngleValue));
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <SERVO_voidSetDegreeRotate+0xa0>
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <SERVO_voidSetDegreeRotate+0xa2>
    30aa:	ed b7       	in	r30, 0x3d	; 61
    30ac:	fe b7       	in	r31, 0x3e	; 62
    30ae:	31 96       	adiw	r30, 0x01	; 1
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	24 eb       	ldi	r18, 0xB4	; 180
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	0f 2e       	mov	r0, r31
    30ca:	f6 e2       	ldi	r31, 0x26	; 38
    30cc:	ef 2e       	mov	r14, r31
    30ce:	f2 e0       	ldi	r31, 0x02	; 2
    30d0:	ff 2e       	mov	r15, r31
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	0f 2f       	mov	r16, r31
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	1f 2f       	mov	r17, r31
    30da:	f0 2d       	mov	r31, r0
    30dc:	0f 2e       	mov	r0, r31
    30de:	f8 e2       	ldi	r31, 0x28	; 40
    30e0:	af 2e       	mov	r10, r31
    30e2:	fa e0       	ldi	r31, 0x0A	; 10
    30e4:	bf 2e       	mov	r11, r31
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	cf 2e       	mov	r12, r31
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	df 2e       	mov	r13, r31
    30ee:	f0 2d       	mov	r31, r0
    30f0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <MAPPING_s32GetOutput>
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	0e 94 1d 1a 	call	0x343a	; 0x343a <TIM1_voidSetCmpARegValue>
	}

}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	ff 90       	pop	r15
    3112:	ef 90       	pop	r14
    3114:	df 90       	pop	r13
    3116:	cf 90       	pop	r12
    3118:	bf 90       	pop	r11
    311a:	af 90       	pop	r10
    311c:	08 95       	ret

0000311e <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    3126:	af e4       	ldi	r26, 0x4F	; 79
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	ef e4       	ldi	r30, 0x4F	; 79
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8e 7f       	andi	r24, 0xFE	; 254
    3132:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    3134:	af e4       	ldi	r26, 0x4F	; 79
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	ef e4       	ldi	r30, 0x4F	; 79
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	82 60       	ori	r24, 0x02	; 2
    3140:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    3142:	ae e4       	ldi	r26, 0x4E	; 78
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	ee e4       	ldi	r30, 0x4E	; 78
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	88 60       	ori	r24, 0x08	; 8
    314e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    3150:	ae e4       	ldi	r26, 0x4E	; 78
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ee e4       	ldi	r30, 0x4E	; 78
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	80 61       	ori	r24, 0x10	; 16
    315c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    315e:	af e4       	ldi	r26, 0x4F	; 79
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ef e4       	ldi	r30, 0x4F	; 79
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7b       	andi	r24, 0xBF	; 191
    316a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    316c:	af e4       	ldi	r26, 0x4F	; 79
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ef e4       	ldi	r30, 0x4F	; 79
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	80 68       	ori	r24, 0x80	; 128
    3178:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    317a:	af e4       	ldi	r26, 0x4F	; 79
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	ef e4       	ldi	r30, 0x4F	; 79
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	8f 7e       	andi	r24, 0xEF	; 239
    3186:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    3188:	af e4       	ldi	r26, 0x4F	; 79
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ef e4       	ldi	r30, 0x4F	; 79
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	80 62       	ori	r24, 0x20	; 32
    3194:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    3196:	ae e4       	ldi	r26, 0x4E	; 78
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	ee e4       	ldi	r30, 0x4E	; 78
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	88 7f       	andi	r24, 0xF8	; 248
    31a2:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    31a4:	a9 e5       	ldi	r26, 0x59	; 89
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e9 e5       	ldi	r30, 0x59	; 89
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8b 7f       	andi	r24, 0xFB	; 251
    31b0:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    31b2:	a9 e5       	ldi	r26, 0x59	; 89
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e9 e5       	ldi	r30, 0x59	; 89
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	87 7f       	andi	r24, 0xF7	; 247
    31be:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    31c0:	a9 e5       	ldi	r26, 0x59	; 89
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e9 e5       	ldi	r30, 0x59	; 89
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	8f 7e       	andi	r24, 0xEF	; 239
    31cc:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    31ce:	a9 e5       	ldi	r26, 0x59	; 89
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e9 e5       	ldi	r30, 0x59	; 89
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	8f 7d       	andi	r24, 0xDF	; 223
    31da:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    31dc:	a8 e5       	ldi	r26, 0x58	; 88
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e8 e5       	ldi	r30, 0x58	; 88
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	84 60       	ori	r24, 0x04	; 4
    31e8:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    31ea:	a8 e5       	ldi	r26, 0x58	; 88
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e8 e5       	ldi	r30, 0x58	; 88
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	88 60       	ori	r24, 0x08	; 8
    31f6:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    31f8:	a8 e5       	ldi	r26, 0x58	; 88
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e8 e5       	ldi	r30, 0x58	; 88
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	80 61       	ori	r24, 0x10	; 16
    3204:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    3206:	a8 e5       	ldi	r26, 0x58	; 88
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e8 e5       	ldi	r30, 0x58	; 88
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	80 62       	ori	r24, 0x20	; 32
    3212:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    3214:	ea e4       	ldi	r30, 0x4A	; 74
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    321a:	eb e4       	ldi	r30, 0x4B	; 75
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    3220:	e8 e4       	ldi	r30, 0x48	; 72
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    3226:	e9 e4       	ldi	r30, 0x49	; 73
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    322c:	ec e4       	ldi	r30, 0x4C	; 76
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    3232:	ed e4       	ldi	r30, 0x4D	; 77
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    3238:	e6 e4       	ldi	r30, 0x46	; 70
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    323e:	e7 e4       	ldi	r30, 0x47	; 71
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	10 82       	st	Z, r1
  
}
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	0f 92       	push	r0
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    3256:	ae e4       	ldi	r26, 0x4E	; 78
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	ee e4       	ldi	r30, 0x4E	; 78
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	88 7f       	andi	r24, 0xF8	; 248
    3262:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    3264:	ae e4       	ldi	r26, 0x4E	; 78
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	ee e4       	ldi	r30, 0x4E	; 78
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	98 2f       	mov	r25, r24
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	87 70       	andi	r24, 0x07	; 7
    3274:	89 2b       	or	r24, r25
    3276:	8c 93       	st	X, r24
	
}
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    3288:	ae e4       	ldi	r26, 0x4E	; 78
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ee e4       	ldi	r30, 0x4E	; 78
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	88 7f       	andi	r24, 0xF8	; 248
    3294:	8c 93       	st	X, r24
	
}
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    32a4:	a9 e5       	ldi	r26, 0x59	; 89
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e9 e5       	ldi	r30, 0x59	; 89
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	84 60       	ori	r24, 0x04	; 4
    32b0:	8c 93       	st	X, r24
	
}
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    32c0:	a9 e5       	ldi	r26, 0x59	; 89
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e9 e5       	ldi	r30, 0x59	; 89
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	8b 7f       	andi	r24, 0xFB	; 251
    32cc:	8c 93       	st	X, r24
	
}
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    32dc:	a9 e5       	ldi	r26, 0x59	; 89
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e9 e5       	ldi	r30, 0x59	; 89
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	80 61       	ori	r24, 0x10	; 16
    32e8:	8c 93       	st	X, r24
	
}
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    32f8:	a9 e5       	ldi	r26, 0x59	; 89
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e9 e5       	ldi	r30, 0x59	; 89
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	8f 7e       	andi	r24, 0xEF	; 239
    3304:	8c 93       	st	X, r24
	
}
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    3314:	a9 e5       	ldi	r26, 0x59	; 89
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	e9 e5       	ldi	r30, 0x59	; 89
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	88 60       	ori	r24, 0x08	; 8
    3320:	8c 93       	st	X, r24
	
}
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    3330:	a9 e5       	ldi	r26, 0x59	; 89
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e9 e5       	ldi	r30, 0x59	; 89
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	87 7f       	andi	r24, 0xF7	; 247
    333c:	8c 93       	st	X, r24
	
}
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <TIM1_voidEnableIcuInt>:
void TIM1_voidEnableIcuInt(void)
{
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    334c:	a9 e5       	ldi	r26, 0x59	; 89
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e9 e5       	ldi	r30, 0x59	; 89
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	80 62       	ori	r24, 0x20	; 32
    3358:	8c 93       	st	X, r24
}
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <TIM1_voidDisableIcuInt>:
void TIM1_voidDisableIcuInt(void)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    3368:	a9 e5       	ldi	r26, 0x59	; 89
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e9 e5       	ldi	r30, 0x59	; 89
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8f 7d       	andi	r24, 0xDF	; 223
    3374:	8c 93       	st	X, r24
}
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <TIM1_voidSetCallbackOvfInt+0x6>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	9a 81       	ldd	r25, Y+2	; 0x02
    338e:	90 93 7d 03 	sts	0x037D, r25
    3392:	80 93 7c 03 	sts	0x037C, r24
}
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	08 95       	ret

000033a0 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <TIM1_voidSetCallbackCompAInt+0x6>
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	90 93 7f 03 	sts	0x037F, r25
    33b6:	80 93 7e 03 	sts	0x037E, r24
}
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <TIM1_voidSetCallbackCompBInt+0x6>
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	9a 81       	ldd	r25, Y+2	; 0x02
    33d6:	90 93 79 03 	sts	0x0379, r25
    33da:	80 93 78 03 	sts	0x0378, r24
}
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <TIM1_voidSetCallbackIcuInt>:
void TIM1_voidSetCallbackIcuInt(pf pfIcuCalbckCpy)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <TIM1_voidSetCallbackIcuInt+0x6>
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	90 93 7b 03 	sts	0x037B, r25
    33fe:	80 93 7a 03 	sts	0x037A, r24
}
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	08 95       	ret

0000340c <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    340c:	df 93       	push	r29
    340e:	cf 93       	push	r28
    3410:	00 d0       	rcall	.+0      	; 0x3412 <TIM1_voidSetTimerValue+0x6>
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    341a:	ec e4       	ldi	r30, 0x4C	; 76
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    3422:	ed e4       	ldi	r30, 0x4D	; 77
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	89 2f       	mov	r24, r25
    342c:	99 27       	eor	r25, r25
    342e:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	00 d0       	rcall	.+0      	; 0x3440 <TIM1_voidSetCmpARegValue+0x6>
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	9a 83       	std	Y+2, r25	; 0x02
    3446:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    3448:	ea e4       	ldi	r30, 0x4A	; 74
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    3450:	eb e4       	ldi	r30, 0x4B	; 75
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	9a 81       	ldd	r25, Y+2	; 0x02
    3458:	89 2f       	mov	r24, r25
    345a:	99 27       	eor	r25, r25
    345c:	80 83       	st	Z, r24
	
}
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <TIM1_voidSetCmpBRegValue+0x6>
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	9a 83       	std	Y+2, r25	; 0x02
    3474:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    3476:	e8 e4       	ldi	r30, 0x48	; 72
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    347e:	e9 e4       	ldi	r30, 0x49	; 73
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	89 2f       	mov	r24, r25
    3488:	99 27       	eor	r25, r25
    348a:	80 83       	st	Z, r24
	
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	08 95       	ret

00003496 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	00 d0       	rcall	.+0      	; 0x349c <TIM1_voidSetIcuRegValue+0x6>
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    34a4:	e6 e4       	ldi	r30, 0x46	; 70
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	80 83       	st	Z, r24

}
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <TIM1_u8ReadTimerValue+0x6>
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    34c4:	ed e4       	ldi	r30, 0x4D	; 77
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	88 2f       	mov	r24, r24
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	98 2f       	mov	r25, r24
    34d8:	88 27       	eor	r24, r24
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    34de:	ec e4       	ldi	r30, 0x4C	; 76
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	9a 81       	ldd	r25, Y+2	; 0x02
    34ec:	82 2b       	or	r24, r18
    34ee:	93 2b       	or	r25, r19
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    3502:	1f 92       	push	r1
    3504:	0f 92       	push	r0
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	0f 92       	push	r0
    350a:	11 24       	eor	r1, r1
    350c:	2f 93       	push	r18
    350e:	3f 93       	push	r19
    3510:	4f 93       	push	r20
    3512:	5f 93       	push	r21
    3514:	6f 93       	push	r22
    3516:	7f 93       	push	r23
    3518:	8f 93       	push	r24
    351a:	9f 93       	push	r25
    351c:	af 93       	push	r26
    351e:	bf 93       	push	r27
    3520:	ef 93       	push	r30
    3522:	ff 93       	push	r31
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    352c:	e0 91 7c 03 	lds	r30, 0x037C
    3530:	f0 91 7d 03 	lds	r31, 0x037D
    3534:	09 95       	icall
	
}
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	bf 91       	pop	r27
    3540:	af 91       	pop	r26
    3542:	9f 91       	pop	r25
    3544:	8f 91       	pop	r24
    3546:	7f 91       	pop	r23
    3548:	6f 91       	pop	r22
    354a:	5f 91       	pop	r21
    354c:	4f 91       	pop	r20
    354e:	3f 91       	pop	r19
    3550:	2f 91       	pop	r18
    3552:	0f 90       	pop	r0
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	0f 90       	pop	r0
    3558:	1f 90       	pop	r1
    355a:	18 95       	reti

0000355c <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    355c:	1f 92       	push	r1
    355e:	0f 92       	push	r0
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	0f 92       	push	r0
    3564:	11 24       	eor	r1, r1
    3566:	2f 93       	push	r18
    3568:	3f 93       	push	r19
    356a:	4f 93       	push	r20
    356c:	5f 93       	push	r21
    356e:	6f 93       	push	r22
    3570:	7f 93       	push	r23
    3572:	8f 93       	push	r24
    3574:	9f 93       	push	r25
    3576:	af 93       	push	r26
    3578:	bf 93       	push	r27
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    3586:	e0 91 7e 03 	lds	r30, 0x037E
    358a:	f0 91 7f 03 	lds	r31, 0x037F
    358e:	09 95       	icall
}
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	ff 91       	pop	r31
    3596:	ef 91       	pop	r30
    3598:	bf 91       	pop	r27
    359a:	af 91       	pop	r26
    359c:	9f 91       	pop	r25
    359e:	8f 91       	pop	r24
    35a0:	7f 91       	pop	r23
    35a2:	6f 91       	pop	r22
    35a4:	5f 91       	pop	r21
    35a6:	4f 91       	pop	r20
    35a8:	3f 91       	pop	r19
    35aa:	2f 91       	pop	r18
    35ac:	0f 90       	pop	r0
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	0f 90       	pop	r0
    35b2:	1f 90       	pop	r1
    35b4:	18 95       	reti

000035b6 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    35b6:	1f 92       	push	r1
    35b8:	0f 92       	push	r0
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	0f 92       	push	r0
    35be:	11 24       	eor	r1, r1
    35c0:	2f 93       	push	r18
    35c2:	3f 93       	push	r19
    35c4:	4f 93       	push	r20
    35c6:	5f 93       	push	r21
    35c8:	6f 93       	push	r22
    35ca:	7f 93       	push	r23
    35cc:	8f 93       	push	r24
    35ce:	9f 93       	push	r25
    35d0:	af 93       	push	r26
    35d2:	bf 93       	push	r27
    35d4:	ef 93       	push	r30
    35d6:	ff 93       	push	r31
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    35e0:	e0 91 78 03 	lds	r30, 0x0378
    35e4:	f0 91 79 03 	lds	r31, 0x0379
    35e8:	09 95       	icall
}
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	bf 91       	pop	r27
    35f4:	af 91       	pop	r26
    35f6:	9f 91       	pop	r25
    35f8:	8f 91       	pop	r24
    35fa:	7f 91       	pop	r23
    35fc:	6f 91       	pop	r22
    35fe:	5f 91       	pop	r21
    3600:	4f 91       	pop	r20
    3602:	3f 91       	pop	r19
    3604:	2f 91       	pop	r18
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	0f 90       	pop	r0
    360c:	1f 90       	pop	r1
    360e:	18 95       	reti

00003610 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    3610:	1f 92       	push	r1
    3612:	0f 92       	push	r0
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	0f 92       	push	r0
    3618:	11 24       	eor	r1, r1
    361a:	2f 93       	push	r18
    361c:	3f 93       	push	r19
    361e:	4f 93       	push	r20
    3620:	5f 93       	push	r21
    3622:	6f 93       	push	r22
    3624:	7f 93       	push	r23
    3626:	8f 93       	push	r24
    3628:	9f 93       	push	r25
    362a:	af 93       	push	r26
    362c:	bf 93       	push	r27
    362e:	ef 93       	push	r30
    3630:	ff 93       	push	r31
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    363a:	e0 91 7a 03 	lds	r30, 0x037A
    363e:	f0 91 7b 03 	lds	r31, 0x037B
    3642:	09 95       	icall
}
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	ff 91       	pop	r31
    364a:	ef 91       	pop	r30
    364c:	bf 91       	pop	r27
    364e:	af 91       	pop	r26
    3650:	9f 91       	pop	r25
    3652:	8f 91       	pop	r24
    3654:	7f 91       	pop	r23
    3656:	6f 91       	pop	r22
    3658:	5f 91       	pop	r21
    365a:	4f 91       	pop	r20
    365c:	3f 91       	pop	r19
    365e:	2f 91       	pop	r18
    3660:	0f 90       	pop	r0
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	0f 90       	pop	r0
    3666:	1f 90       	pop	r1
    3668:	18 95       	reti

0000366a <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3672:	e6 e4       	ldi	r30, 0x46	; 70
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
}
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    3688:	ae e4       	ldi	r26, 0x4E	; 78
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	ee e4       	ldi	r30, 0x4E	; 78
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	80 64       	ori	r24, 0x40	; 64
    3694:	8c 93       	st	X, r24
 }
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    36a4:	ae e4       	ldi	r26, 0x4E	; 78
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	ee e4       	ldi	r30, 0x4E	; 78
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	8f 7b       	andi	r24, 0xBF	; 191
    36b0:	8c 93       	st	X, r24
 }
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <Timer0_voidInit>:
#include "TIMER_interface.h"

static void (*TIMER0_pvCallBackFunc) (void) = NULL ;

void Timer0_voidInit(void)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
		/* Choose Timer Wave Generation Mode */
#if TIMO_MODE == TIM0_NORMAL
	CLR_BIT(TCCR0,TCCR0_WGM00);
    36c0:	a3 e5       	ldi	r26, 0x53	; 83
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	e3 e5       	ldi	r30, 0x53	; 83
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	8f 7b       	andi	r24, 0xBF	; 191
    36cc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    36ce:	a3 e5       	ldi	r26, 0x53	; 83
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e3 e5       	ldi	r30, 0x53	; 83
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	87 7f       	andi	r24, 0xF7	; 247
    36da:	8c 93       	st	X, r24
#elif TIMO_WAVE == TIM0_PHASE_NONINVERT_OC0
	CLR_BIT(TCCR0,TCCR0_COM00);
	SET_BIT(TCCR0,TCCR0_COM01);
	/*default is oco diconnected */
#else
	CLR_BIT(TCCR0,4);
    36dc:	a3 e5       	ldi	r26, 0x53	; 83
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e3 e5       	ldi	r30, 0x53	; 83
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	8f 7e       	andi	r24, 0xEF	; 239
    36e8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
    36ea:	a3 e5       	ldi	r26, 0x53	; 83
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e3 e5       	ldi	r30, 0x53	; 83
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	8f 7d       	andi	r24, 0xDF	; 223
    36f6:	8c 93       	st	X, r24
*/
	/* Prescaler Division by prescaler init
	TCCR0=TCCR0&Prescaler_Mask;
	TCCR0=TCCR0|PRESCALER_init;
	*/
}
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <Timer0_u8SetCallBack>:

u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <Timer0_u8SetCallBack+0x6>
    3704:	0f 92       	push	r0
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9b 83       	std	Y+3, r25	; 0x03
    370c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    370e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    3710:	8a 81       	ldd	r24, Y+2	; 0x02
    3712:	9b 81       	ldd	r25, Y+3	; 0x03
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	39 f0       	breq	.+14     	; 0x3726 <Timer0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc ;
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	9b 81       	ldd	r25, Y+3	; 0x03
    371c:	90 93 aa 02 	sts	0x02AA, r25
    3720:	80 93 a9 02 	sts	0x02A9, r24
    3724:	02 c0       	rjmp	.+4      	; 0x372a <Timer0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER ;
    3726:	82 e0       	ldi	r24, 0x02	; 2
    3728:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus ;
    372a:	89 81       	ldd	r24, Y+1	; 0x01
}
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <Timer0_voidSetCompMatchValue>:

void Timer0_voidSetCompMatchValue(u8 Copy_u8CompMatchValue )
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	0f 92       	push	r0
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompMatchValue ;
    3744:	ec e5       	ldi	r30, 0x5C	; 92
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	80 83       	st	Z, r24
}
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <Timer0_voidInterruptEnable>:

void Timer0_voidInterruptEnable(void)
{
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
#if TIMO_MODE == TIM0_CTC
	/* Output Compare match interrupt enable */
		SET_BIT(TIMSK,TIMSK_OCIE0);

#elif TIMO_MODE == TIM0_NORMAL
	SET_BIT(TIMSK,TIMSK_TOIE0);
    375c:	a9 e5       	ldi	r26, 0x59	; 89
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e9 e5       	ldi	r30, 0x59	; 89
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	81 60       	ori	r24, 0x01	; 1
    3768:	8c 93       	st	X, r24
#endif
}
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <Timer0_voidSetPrescalerValue>:

void Timer0_voidSetPrescalerValue(u8 Copy_u8PrescalerValue)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	0f 92       	push	r0
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	89 83       	std	Y+1, r24	; 0x01
	/* Set Prescaler Division by User */
		TCCR0=TCCR0&Prescaler_Mask;
    377c:	a3 e5       	ldi	r26, 0x53	; 83
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	e3 e5       	ldi	r30, 0x53	; 83
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	88 7f       	andi	r24, 0xF8	; 248
    3788:	8c 93       	st	X, r24
		TCCR0=TCCR0|Copy_u8PrescalerValue;
    378a:	a3 e5       	ldi	r26, 0x53	; 83
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e3 e5       	ldi	r30, 0x53	; 83
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	90 81       	ld	r25, Z
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	89 2b       	or	r24, r25
    3798:	8c 93       	st	X, r24
}
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <Timer0void_ModifyPreloadValue>:

void Timer0void_ModifyPreloadValue( u8 Copy_u8PreloadValue )
{
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	0f 92       	push	r0
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreloadValue ;
    37ae:	e2 e5       	ldi	r30, 0x52	; 82
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	80 83       	st	Z, r24
}
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    37be:	1f 92       	push	r1
    37c0:	0f 92       	push	r0
    37c2:	0f b6       	in	r0, 0x3f	; 63
    37c4:	0f 92       	push	r0
    37c6:	11 24       	eor	r1, r1
    37c8:	2f 93       	push	r18
    37ca:	3f 93       	push	r19
    37cc:	4f 93       	push	r20
    37ce:	5f 93       	push	r21
    37d0:	6f 93       	push	r22
    37d2:	7f 93       	push	r23
    37d4:	8f 93       	push	r24
    37d6:	9f 93       	push	r25
    37d8:	af 93       	push	r26
    37da:	bf 93       	push	r27
    37dc:	ef 93       	push	r30
    37de:	ff 93       	push	r31
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    37e8:	80 91 a9 02 	lds	r24, 0x02A9
    37ec:	90 91 aa 02 	lds	r25, 0x02AA
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	29 f0       	breq	.+10     	; 0x37fe <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    37f4:	e0 91 a9 02 	lds	r30, 0x02A9
    37f8:	f0 91 aa 02 	lds	r31, 0x02AA
    37fc:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	ff 91       	pop	r31
    3804:	ef 91       	pop	r30
    3806:	bf 91       	pop	r27
    3808:	af 91       	pop	r26
    380a:	9f 91       	pop	r25
    380c:	8f 91       	pop	r24
    380e:	7f 91       	pop	r23
    3810:	6f 91       	pop	r22
    3812:	5f 91       	pop	r21
    3814:	4f 91       	pop	r20
    3816:	3f 91       	pop	r19
    3818:	2f 91       	pop	r18
    381a:	0f 90       	pop	r0
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	0f 90       	pop	r0
    3820:	1f 90       	pop	r1
    3822:	18 95       	reti

00003824 <__vector_11>:


/* For Over Flow */
void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    3824:	1f 92       	push	r1
    3826:	0f 92       	push	r0
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	0f 92       	push	r0
    382c:	11 24       	eor	r1, r1
    382e:	2f 93       	push	r18
    3830:	3f 93       	push	r19
    3832:	4f 93       	push	r20
    3834:	5f 93       	push	r21
    3836:	6f 93       	push	r22
    3838:	7f 93       	push	r23
    383a:	8f 93       	push	r24
    383c:	9f 93       	push	r25
    383e:	af 93       	push	r26
    3840:	bf 93       	push	r27
    3842:	ef 93       	push	r30
    3844:	ff 93       	push	r31
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    384e:	80 91 a9 02 	lds	r24, 0x02A9
    3852:	90 91 aa 02 	lds	r25, 0x02AA
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	29 f0       	breq	.+10     	; 0x3864 <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();
    385a:	e0 91 a9 02 	lds	r30, 0x02A9
    385e:	f0 91 aa 02 	lds	r31, 0x02AA
    3862:	09 95       	icall
	}
	else
	{
		// Do Nothing
	}
}
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	ff 91       	pop	r31
    386a:	ef 91       	pop	r30
    386c:	bf 91       	pop	r27
    386e:	af 91       	pop	r26
    3870:	9f 91       	pop	r25
    3872:	8f 91       	pop	r24
    3874:	7f 91       	pop	r23
    3876:	6f 91       	pop	r22
    3878:	5f 91       	pop	r21
    387a:	4f 91       	pop	r20
    387c:	3f 91       	pop	r19
    387e:	2f 91       	pop	r18
    3880:	0f 90       	pop	r0
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	0f 90       	pop	r0
    3886:	1f 90       	pop	r1
    3888:	18 95       	reti

0000388a <main>:

#include <util/delay.h> /* for delays */
#include <string.h>     /* For the strcmp function */

void main()
{
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	2e 97       	sbiw	r28, 0x0e	; 14
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPort_Direction(CLCD_CONTROL_PORT,PORT_OUTPUT);
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	6f ef       	ldi	r22, 0xFF	; 255
    38a2:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPort_Direction>
	DIO_SetPort_Direction(CLCD_DATA_PORT,PORT_OUTPUT);
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	6f ef       	ldi	r22, 0xFF	; 255
    38aa:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPort_Direction>
	DIO_SetPort_Direction(KPD_PORT,PORT_OUTPUT);
    38ae:	82 e0       	ldi	r24, 0x02	; 2
    38b0:	6f ef       	ldi	r22, 0xFF	; 255
    38b2:	0e 94 45 0c 	call	0x188a	; 0x188a <DIO_SetPort_Direction>

	/* initialize all components */
	House_init();
    38b6:	0e 94 b6 11 	call	0x236c	; 0x236c <House_init>

	/* Initialise Users */
	init_voidUsers();
    38ba:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <init_voidUsers>

	/* Display the "House System" message */
	CLCD_voidSendString("House System");
    38be:	84 e7       	ldi	r24, 0x74	; 116
    38c0:	91 e0       	ldi	r25, 0x01	; 1
    38c2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CLCD_voidSendString>
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	aa e7       	ldi	r26, 0x7A	; 122
    38cc:	b4 e4       	ldi	r27, 0x44	; 68
    38ce:	8b 87       	std	Y+11, r24	; 0x0b
    38d0:	9c 87       	std	Y+12, r25	; 0x0c
    38d2:	ad 87       	std	Y+13, r26	; 0x0d
    38d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38da:	8d 85       	ldd	r24, Y+13	; 0x0d
    38dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4a ef       	ldi	r20, 0xFA	; 250
    38e4:	54 e4       	ldi	r21, 0x44	; 68
    38e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8f 83       	std	Y+7, r24	; 0x07
    38f0:	98 87       	std	Y+8, r25	; 0x08
    38f2:	a9 87       	std	Y+9, r26	; 0x09
    38f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38f6:	6f 81       	ldd	r22, Y+7	; 0x07
    38f8:	78 85       	ldd	r23, Y+8	; 0x08
    38fa:	89 85       	ldd	r24, Y+9	; 0x09
    38fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e8       	ldi	r20, 0x80	; 128
    3904:	5f e3       	ldi	r21, 0x3F	; 63
    3906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    390a:	88 23       	and	r24, r24
    390c:	2c f4       	brge	.+10     	; 0x3918 <main+0x8e>
		__ticks = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	3f c0       	rjmp	.+126    	; 0x3996 <main+0x10c>
	else if (__tmp > 65535)
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	3f ef       	ldi	r19, 0xFF	; 255
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	57 e4       	ldi	r21, 0x47	; 71
    3928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	4c f5       	brge	.+82     	; 0x3982 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	6b 85       	ldd	r22, Y+11	; 0x0b
    3932:	7c 85       	ldd	r23, Y+12	; 0x0c
    3934:	8d 85       	ldd	r24, Y+13	; 0x0d
    3936:	9e 85       	ldd	r25, Y+14	; 0x0e
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e2       	ldi	r20, 0x20	; 32
    393e:	51 e4       	ldi	r21, 0x41	; 65
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	0f c0       	rjmp	.+30     	; 0x3978 <main+0xee>
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9c 83       	std	Y+4, r25	; 0x04
    3960:	8b 83       	std	Y+3, r24	; 0x03
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <main+0xdc>
    396a:	9c 83       	std	Y+4, r25	; 0x04
    396c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	69 f7       	brne	.-38     	; 0x395a <main+0xd0>
    3980:	14 c0       	rjmp	.+40     	; 0x39aa <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	6f 81       	ldd	r22, Y+7	; 0x07
    3984:	78 85       	ldd	r23, Y+8	; 0x08
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9e 83       	std	Y+6, r25	; 0x06
    3994:	8d 83       	std	Y+5, r24	; 0x05
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	9a 81       	ldd	r25, Y+2	; 0x02
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <main+0x118>
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLCD_clear();
    39aa:	0e 94 3b 0c 	call	0x1876	; 0x1876 <CLCD_clear>


	while(1)
	{
		/* call the system */
		houseSystem();
    39ae:	0e 94 30 10 	call	0x2060	; 0x2060 <houseSystem>
    39b2:	fd cf       	rjmp	.-6      	; 0x39ae <main+0x124>

000039b4 <__udivmodsi4>:
    39b4:	a1 e2       	ldi	r26, 0x21	; 33
    39b6:	1a 2e       	mov	r1, r26
    39b8:	aa 1b       	sub	r26, r26
    39ba:	bb 1b       	sub	r27, r27
    39bc:	fd 01       	movw	r30, r26
    39be:	0d c0       	rjmp	.+26     	; 0x39da <__udivmodsi4_ep>

000039c0 <__udivmodsi4_loop>:
    39c0:	aa 1f       	adc	r26, r26
    39c2:	bb 1f       	adc	r27, r27
    39c4:	ee 1f       	adc	r30, r30
    39c6:	ff 1f       	adc	r31, r31
    39c8:	a2 17       	cp	r26, r18
    39ca:	b3 07       	cpc	r27, r19
    39cc:	e4 07       	cpc	r30, r20
    39ce:	f5 07       	cpc	r31, r21
    39d0:	20 f0       	brcs	.+8      	; 0x39da <__udivmodsi4_ep>
    39d2:	a2 1b       	sub	r26, r18
    39d4:	b3 0b       	sbc	r27, r19
    39d6:	e4 0b       	sbc	r30, r20
    39d8:	f5 0b       	sbc	r31, r21

000039da <__udivmodsi4_ep>:
    39da:	66 1f       	adc	r22, r22
    39dc:	77 1f       	adc	r23, r23
    39de:	88 1f       	adc	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	1a 94       	dec	r1
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <__udivmodsi4_loop>
    39e6:	60 95       	com	r22
    39e8:	70 95       	com	r23
    39ea:	80 95       	com	r24
    39ec:	90 95       	com	r25
    39ee:	9b 01       	movw	r18, r22
    39f0:	ac 01       	movw	r20, r24
    39f2:	bd 01       	movw	r22, r26
    39f4:	cf 01       	movw	r24, r30
    39f6:	08 95       	ret

000039f8 <__prologue_saves__>:
    39f8:	2f 92       	push	r2
    39fa:	3f 92       	push	r3
    39fc:	4f 92       	push	r4
    39fe:	5f 92       	push	r5
    3a00:	6f 92       	push	r6
    3a02:	7f 92       	push	r7
    3a04:	8f 92       	push	r8
    3a06:	9f 92       	push	r9
    3a08:	af 92       	push	r10
    3a0a:	bf 92       	push	r11
    3a0c:	cf 92       	push	r12
    3a0e:	df 92       	push	r13
    3a10:	ef 92       	push	r14
    3a12:	ff 92       	push	r15
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	ca 1b       	sub	r28, r26
    3a22:	db 0b       	sbc	r29, r27
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	09 94       	ijmp

00003a30 <__epilogue_restores__>:
    3a30:	2a 88       	ldd	r2, Y+18	; 0x12
    3a32:	39 88       	ldd	r3, Y+17	; 0x11
    3a34:	48 88       	ldd	r4, Y+16	; 0x10
    3a36:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a38:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a40:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a42:	b9 84       	ldd	r11, Y+9	; 0x09
    3a44:	c8 84       	ldd	r12, Y+8	; 0x08
    3a46:	df 80       	ldd	r13, Y+7	; 0x07
    3a48:	ee 80       	ldd	r14, Y+6	; 0x06
    3a4a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a4c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a50:	aa 81       	ldd	r26, Y+2	; 0x02
    3a52:	b9 81       	ldd	r27, Y+1	; 0x01
    3a54:	ce 0f       	add	r28, r30
    3a56:	d1 1d       	adc	r29, r1
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	ed 01       	movw	r28, r26
    3a64:	08 95       	ret

00003a66 <memcpy>:
    3a66:	fb 01       	movw	r30, r22
    3a68:	dc 01       	movw	r26, r24
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <memcpy+0xa>
    3a6c:	01 90       	ld	r0, Z+
    3a6e:	0d 92       	st	X+, r0
    3a70:	41 50       	subi	r20, 0x01	; 1
    3a72:	50 40       	sbci	r21, 0x00	; 0
    3a74:	d8 f7       	brcc	.-10     	; 0x3a6c <memcpy+0x6>
    3a76:	08 95       	ret

00003a78 <strcmp>:
    3a78:	fb 01       	movw	r30, r22
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	8d 91       	ld	r24, X+
    3a7e:	01 90       	ld	r0, Z+
    3a80:	80 19       	sub	r24, r0
    3a82:	01 10       	cpse	r0, r1
    3a84:	d9 f3       	breq	.-10     	; 0x3a7c <strcmp+0x4>
    3a86:	99 0b       	sbc	r25, r25
    3a88:	08 95       	ret

00003a8a <_exit>:
    3a8a:	f8 94       	cli

00003a8c <__stop_program>:
    3a8c:	ff cf       	rjmp	.-2      	; 0x3a8c <__stop_program>
